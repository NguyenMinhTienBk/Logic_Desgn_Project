
Digital_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c38  08002c38  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c38  08002c38  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c38  08002c38  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  2000002c  08002c6c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08002c6c  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b34a  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc0  00000000  00000000  0002b39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  0002e088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d4b  00000000  00000000  0002ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb1a  00000000  00000000  000319e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa2e  00000000  00000000  000404fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000caf2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  000caf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bf8 	.word	0x08002bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002bf8 	.word	0x08002bf8

0800014c <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	switch (status_mode){
 800015c:	4b86      	ldr	r3, [pc, #536]	; (8000378 <fsm_mode_run+0x220>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	2b04      	cmp	r3, #4
 8000162:	f200 80fd 	bhi.w	8000360 <fsm_mode_run+0x208>
 8000166:	a201      	add	r2, pc, #4	; (adr r2, 800016c <fsm_mode_run+0x14>)
 8000168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800016c:	08000181 	.word	0x08000181
 8000170:	080001a7 	.word	0x080001a7
 8000174:	080001f5 	.word	0x080001f5
 8000178:	08000279 	.word	0x08000279
 800017c:	080002fd 	.word	0x080002fd
	case INIT:
		status_mode = MODE1;
 8000180:	4b7d      	ldr	r3, [pc, #500]	; (8000378 <fsm_mode_run+0x220>)
 8000182:	2201      	movs	r2, #1
 8000184:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 8000186:	4b7d      	ldr	r3, [pc, #500]	; (800037c <fsm_mode_run+0x224>)
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 800018c:	4b7c      	ldr	r3, [pc, #496]	; (8000380 <fsm_mode_run+0x228>)
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
		status_pedes = Pedes_Off;
 8000192:	4b7c      	ldr	r3, [pc, #496]	; (8000384 <fsm_mode_run+0x22c>)
 8000194:	2228      	movs	r2, #40	; 0x28
 8000196:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 8000198:	4b7b      	ldr	r3, [pc, #492]	; (8000388 <fsm_mode_run+0x230>)
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
		index_led = 0;
 800019e:	4b7b      	ldr	r3, [pc, #492]	; (800038c <fsm_mode_run+0x234>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 80001a4:	e0e5      	b.n	8000372 <fsm_mode_run+0x21a>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 80001a6:	4b7a      	ldr	r3, [pc, #488]	; (8000390 <fsm_mode_run+0x238>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 fa06 	bl	80005bc <isButtonflag>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	f040 80d6 	bne.w	8000364 <fsm_mode_run+0x20c>
			clearTimer1();
 80001b8:	f000 fe54 	bl	8000e64 <clearTimer1>
			clearTimer2();
 80001bc:	f000 fe62 	bl	8000e84 <clearTimer2>
			clearTimer3();
 80001c0:	f000 fe70 	bl	8000ea4 <clearTimer3>
			status_mode = MODE2;
 80001c4:	4b6c      	ldr	r3, [pc, #432]	; (8000378 <fsm_mode_run+0x220>)
 80001c6:	2202      	movs	r2, #2
 80001c8:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_RED;
 80001ca:	4b6c      	ldr	r3, [pc, #432]	; (800037c <fsm_mode_run+0x224>)
 80001cc:	220c      	movs	r2, #12
 80001ce:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 80001d0:	4b6b      	ldr	r3, [pc, #428]	; (8000380 <fsm_mode_run+0x228>)
 80001d2:	220c      	movs	r2, #12
 80001d4:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 80001d6:	4b6f      	ldr	r3, [pc, #444]	; (8000394 <fsm_mode_run+0x23c>)
 80001d8:	2202      	movs	r2, #2
 80001da:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80001dc:	4b6e      	ldr	r3, [pc, #440]	; (8000398 <fsm_mode_run+0x240>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a6e      	ldr	r2, [pc, #440]	; (800039c <fsm_mode_run+0x244>)
 80001e2:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80001e4:	4b68      	ldr	r3, [pc, #416]	; (8000388 <fsm_mode_run+0x230>)
 80001e6:	221e      	movs	r2, #30
 80001e8:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ee:	f000 fe9d 	bl	8000f2c <setTimer3>
		}

		break;
 80001f2:	e0b7      	b.n	8000364 <fsm_mode_run+0x20c>
	case MODE2:
		if (isButtonflag(but1) == 1){
 80001f4:	4b66      	ldr	r3, [pc, #408]	; (8000390 <fsm_mode_run+0x238>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f9df 	bl	80005bc <isButtonflag>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b01      	cmp	r3, #1
 8000202:	d118      	bne.n	8000236 <fsm_mode_run+0xde>
			clearTimer1();
 8000204:	f000 fe2e 	bl	8000e64 <clearTimer1>
			clearTimer2();
 8000208:	f000 fe3c 	bl	8000e84 <clearTimer2>
			clearTimer3();
 800020c:	f000 fe4a 	bl	8000ea4 <clearTimer3>
			status_mode = MODE3;
 8000210:	4b59      	ldr	r3, [pc, #356]	; (8000378 <fsm_mode_run+0x220>)
 8000212:	2203      	movs	r2, #3
 8000214:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_YELLOW;
 8000216:	4b59      	ldr	r3, [pc, #356]	; (800037c <fsm_mode_run+0x224>)
 8000218:	220e      	movs	r2, #14
 800021a:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 800021c:	4b58      	ldr	r3, [pc, #352]	; (8000380 <fsm_mode_run+0x228>)
 800021e:	220e      	movs	r2, #14
 8000220:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 8000222:	4b5c      	ldr	r3, [pc, #368]	; (8000394 <fsm_mode_run+0x23c>)
 8000224:	2203      	movs	r2, #3
 8000226:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 8000228:	4b5d      	ldr	r3, [pc, #372]	; (80003a0 <fsm_mode_run+0x248>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a5b      	ldr	r2, [pc, #364]	; (800039c <fsm_mode_run+0x244>)
 800022e:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000230:	4b55      	ldr	r3, [pc, #340]	; (8000388 <fsm_mode_run+0x230>)
 8000232:	221e      	movs	r2, #30
 8000234:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000236:	4b5b      	ldr	r3, [pc, #364]	; (80003a4 <fsm_mode_run+0x24c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f9be 	bl	80005bc <isButtonflag>
 8000240:	4603      	mov	r3, r0
 8000242:	2b01      	cmp	r3, #1
 8000244:	d10b      	bne.n	800025e <fsm_mode_run+0x106>
			led34++;
 8000246:	4b55      	ldr	r3, [pc, #340]	; (800039c <fsm_mode_run+0x244>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	3301      	adds	r3, #1
 800024c:	4a53      	ldr	r2, [pc, #332]	; (800039c <fsm_mode_run+0x244>)
 800024e:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000250:	4b52      	ldr	r3, [pc, #328]	; (800039c <fsm_mode_run+0x244>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b63      	cmp	r3, #99	; 0x63
 8000256:	dd02      	ble.n	800025e <fsm_mode_run+0x106>
				led34 = 0;
 8000258:	4b50      	ldr	r3, [pc, #320]	; (800039c <fsm_mode_run+0x244>)
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 800025e:	4b52      	ldr	r3, [pc, #328]	; (80003a8 <fsm_mode_run+0x250>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f9aa 	bl	80005bc <isButtonflag>
 8000268:	4603      	mov	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d17c      	bne.n	8000368 <fsm_mode_run+0x210>
			timered  = led34;
 800026e:	4b4b      	ldr	r3, [pc, #300]	; (800039c <fsm_mode_run+0x244>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a49      	ldr	r2, [pc, #292]	; (8000398 <fsm_mode_run+0x240>)
 8000274:	6013      	str	r3, [r2, #0]
		}
		break;
 8000276:	e077      	b.n	8000368 <fsm_mode_run+0x210>
	case MODE3:

		if (isButtonflag(but1) == 1){
 8000278:	4b45      	ldr	r3, [pc, #276]	; (8000390 <fsm_mode_run+0x238>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f99d 	bl	80005bc <isButtonflag>
 8000282:	4603      	mov	r3, r0
 8000284:	2b01      	cmp	r3, #1
 8000286:	d118      	bne.n	80002ba <fsm_mode_run+0x162>
			clearTimer1();
 8000288:	f000 fdec 	bl	8000e64 <clearTimer1>
			clearTimer2();
 800028c:	f000 fdfa 	bl	8000e84 <clearTimer2>
			clearTimer3();
 8000290:	f000 fe08 	bl	8000ea4 <clearTimer3>
			status_mode = MODE4;
 8000294:	4b38      	ldr	r3, [pc, #224]	; (8000378 <fsm_mode_run+0x220>)
 8000296:	2204      	movs	r2, #4
 8000298:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 800029a:	4b38      	ldr	r3, [pc, #224]	; (800037c <fsm_mode_run+0x224>)
 800029c:	220d      	movs	r2, #13
 800029e:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 80002a0:	4b37      	ldr	r3, [pc, #220]	; (8000380 <fsm_mode_run+0x228>)
 80002a2:	220d      	movs	r2, #13
 80002a4:	601a      	str	r2, [r3, #0]
			led12 = MODE4;
 80002a6:	4b3b      	ldr	r3, [pc, #236]	; (8000394 <fsm_mode_run+0x23c>)
 80002a8:	2204      	movs	r2, #4
 80002aa:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 80002ac:	4b3f      	ldr	r3, [pc, #252]	; (80003ac <fsm_mode_run+0x254>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a3a      	ldr	r2, [pc, #232]	; (800039c <fsm_mode_run+0x244>)
 80002b2:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80002b4:	4b34      	ldr	r3, [pc, #208]	; (8000388 <fsm_mode_run+0x230>)
 80002b6:	221e      	movs	r2, #30
 80002b8:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 80002ba:	4b3a      	ldr	r3, [pc, #232]	; (80003a4 <fsm_mode_run+0x24c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f97c 	bl	80005bc <isButtonflag>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d10b      	bne.n	80002e2 <fsm_mode_run+0x18a>
			led34++;
 80002ca:	4b34      	ldr	r3, [pc, #208]	; (800039c <fsm_mode_run+0x244>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	4a32      	ldr	r2, [pc, #200]	; (800039c <fsm_mode_run+0x244>)
 80002d2:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 80002d4:	4b31      	ldr	r3, [pc, #196]	; (800039c <fsm_mode_run+0x244>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b63      	cmp	r3, #99	; 0x63
 80002da:	dd02      	ble.n	80002e2 <fsm_mode_run+0x18a>
				led34 = 0;
 80002dc:	4b2f      	ldr	r3, [pc, #188]	; (800039c <fsm_mode_run+0x244>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80002e2:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <fsm_mode_run+0x250>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f968 	bl	80005bc <isButtonflag>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d13c      	bne.n	800036c <fsm_mode_run+0x214>
			timeyellow  = led34;
 80002f2:	4b2a      	ldr	r3, [pc, #168]	; (800039c <fsm_mode_run+0x244>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a2a      	ldr	r2, [pc, #168]	; (80003a0 <fsm_mode_run+0x248>)
 80002f8:	6013      	str	r3, [r2, #0]
		}

		break;
 80002fa:	e037      	b.n	800036c <fsm_mode_run+0x214>
	case MODE4:
		if (isButtonflag(but1) == 1){
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <fsm_mode_run+0x238>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f95b 	bl	80005bc <isButtonflag>
 8000306:	4603      	mov	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d108      	bne.n	800031e <fsm_mode_run+0x1c6>
			clearTimer1();
 800030c:	f000 fdaa 	bl	8000e64 <clearTimer1>
			clearTimer2();
 8000310:	f000 fdb8 	bl	8000e84 <clearTimer2>
			clearTimer3();
 8000314:	f000 fdc6 	bl	8000ea4 <clearTimer3>
			status_mode = INIT;
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <fsm_mode_run+0x220>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <fsm_mode_run+0x24c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f94a 	bl	80005bc <isButtonflag>
 8000328:	4603      	mov	r3, r0
 800032a:	2b01      	cmp	r3, #1
 800032c:	d10b      	bne.n	8000346 <fsm_mode_run+0x1ee>
			led34++;
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <fsm_mode_run+0x244>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	4a19      	ldr	r2, [pc, #100]	; (800039c <fsm_mode_run+0x244>)
 8000336:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <fsm_mode_run+0x244>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b63      	cmp	r3, #99	; 0x63
 800033e:	dd02      	ble.n	8000346 <fsm_mode_run+0x1ee>
				led34 = 0;
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <fsm_mode_run+0x244>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <fsm_mode_run+0x250>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f936 	bl	80005bc <isButtonflag>
 8000350:	4603      	mov	r3, r0
 8000352:	2b01      	cmp	r3, #1
 8000354:	d10c      	bne.n	8000370 <fsm_mode_run+0x218>
			timegreen = led34;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <fsm_mode_run+0x244>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <fsm_mode_run+0x254>)
 800035c:	6013      	str	r3, [r2, #0]
		}
		break;
 800035e:	e007      	b.n	8000370 <fsm_mode_run+0x218>
	default:
		break;
 8000360:	bf00      	nop
 8000362:	e006      	b.n	8000372 <fsm_mode_run+0x21a>
		break;
 8000364:	bf00      	nop
 8000366:	e004      	b.n	8000372 <fsm_mode_run+0x21a>
		break;
 8000368:	bf00      	nop
 800036a:	e002      	b.n	8000372 <fsm_mode_run+0x21a>
		break;
 800036c:	bf00      	nop
 800036e:	e000      	b.n	8000372 <fsm_mode_run+0x21a>
		break;
 8000370:	bf00      	nop
	}


}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000048 	.word	0x20000048
 800037c:	2000004c 	.word	0x2000004c
 8000380:	20000050 	.word	0x20000050
 8000384:	20000058 	.word	0x20000058
 8000388:	20000054 	.word	0x20000054
 800038c:	2000005c 	.word	0x2000005c
 8000390:	20000060 	.word	0x20000060
 8000394:	20000014 	.word	0x20000014
 8000398:	20000008 	.word	0x20000008
 800039c:	20000018 	.word	0x20000018
 80003a0:	20000010 	.word	0x20000010
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000004 	.word	0x20000004
 80003ac:	2000000c 	.word	0x2000000c

080003b0 <fsm_mode_led7seg>:
 */

#include "fsm_mode_Led7Seg.h"
//int Ts = 10;
//int count = 1;
void fsm_mode_led7seg(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0

	switch (status_led7seg){
 80003b4:	4b7c      	ldr	r3, [pc, #496]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b21      	cmp	r3, #33	; 0x21
 80003ba:	f200 80e2 	bhi.w	8000582 <fsm_mode_led7seg+0x1d2>
 80003be:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <fsm_mode_led7seg+0x14>)
 80003c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c4:	0800044d 	.word	0x0800044d
 80003c8:	08000583 	.word	0x08000583
 80003cc:	08000583 	.word	0x08000583
 80003d0:	08000583 	.word	0x08000583
 80003d4:	08000583 	.word	0x08000583
 80003d8:	08000583 	.word	0x08000583
 80003dc:	08000583 	.word	0x08000583
 80003e0:	08000583 	.word	0x08000583
 80003e4:	08000583 	.word	0x08000583
 80003e8:	08000583 	.word	0x08000583
 80003ec:	08000583 	.word	0x08000583
 80003f0:	08000583 	.word	0x08000583
 80003f4:	08000583 	.word	0x08000583
 80003f8:	08000583 	.word	0x08000583
 80003fc:	08000583 	.word	0x08000583
 8000400:	08000583 	.word	0x08000583
 8000404:	08000583 	.word	0x08000583
 8000408:	08000583 	.word	0x08000583
 800040c:	08000583 	.word	0x08000583
 8000410:	08000583 	.word	0x08000583
 8000414:	08000465 	.word	0x08000465
 8000418:	08000487 	.word	0x08000487
 800041c:	080004a7 	.word	0x080004a7
 8000420:	080004e7 	.word	0x080004e7
 8000424:	08000583 	.word	0x08000583
 8000428:	08000583 	.word	0x08000583
 800042c:	08000583 	.word	0x08000583
 8000430:	08000583 	.word	0x08000583
 8000434:	08000583 	.word	0x08000583
 8000438:	08000583 	.word	0x08000583
 800043c:	08000507 	.word	0x08000507
 8000440:	08000527 	.word	0x08000527
 8000444:	08000547 	.word	0x08000547
 8000448:	08000563 	.word	0x08000563
		case INIT:
				status_led7seg = MODE1_led7seg_1;
 800044c:	4b56      	ldr	r3, [pc, #344]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 800044e:	2214      	movs	r2, #20
 8000450:	601a      	str	r2, [r3, #0]
				//updateLedBuffer(led12,led34);
				//SetLed7Seg1On();
				//update7SEG(index_led);
				index_led++;
 8000452:	4b56      	ldr	r3, [pc, #344]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	4a54      	ldr	r2, [pc, #336]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 800045a:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800045c:	20fa      	movs	r0, #250	; 0xfa
 800045e:	f000 fd65 	bl	8000f2c <setTimer3>
			break;
 8000462:	e09f      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
		case MODE1_led7seg_1:
			if (timer3_flag == 1){
 8000464:	4b52      	ldr	r3, [pc, #328]	; (80005b0 <fsm_mode_led7seg+0x200>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	f040 808c 	bne.w	8000586 <fsm_mode_led7seg+0x1d6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_2;
 800046e:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 8000470:	2215      	movs	r2, #21
 8000472:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 8000474:	4b4d      	ldr	r3, [pc, #308]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	4a4c      	ldr	r2, [pc, #304]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 800047c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800047e:	20fa      	movs	r0, #250	; 0xfa
 8000480:	f000 fd54 	bl	8000f2c <setTimer3>
			}
			break;
 8000484:	e07f      	b.n	8000586 <fsm_mode_led7seg+0x1d6>
		case MODE1_led7seg_2:
			if (timer3_flag == 1){
 8000486:	4b4a      	ldr	r3, [pc, #296]	; (80005b0 <fsm_mode_led7seg+0x200>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d17d      	bne.n	800058a <fsm_mode_led7seg+0x1da>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_3;
 800048e:	4b46      	ldr	r3, [pc, #280]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 8000490:	2216      	movs	r2, #22
 8000492:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 8000494:	4b45      	ldr	r3, [pc, #276]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3301      	adds	r3, #1
 800049a:	4a44      	ldr	r2, [pc, #272]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 800049c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(255);
 800049e:	20ff      	movs	r0, #255	; 0xff
 80004a0:	f000 fd44 	bl	8000f2c <setTimer3>
			}
			break;
 80004a4:	e071      	b.n	800058a <fsm_mode_led7seg+0x1da>
		case MODE1_led7seg_3:

			if (timer3_flag == 1){
 80004a6:	4b42      	ldr	r3, [pc, #264]	; (80005b0 <fsm_mode_led7seg+0x200>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d16f      	bne.n	800058e <fsm_mode_led7seg+0x1de>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_4;
 80004ae:	4b3e      	ldr	r3, [pc, #248]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 80004b0:	2217      	movs	r2, #23
 80004b2:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 80004b4:	4b3d      	ldr	r3, [pc, #244]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
//			    	led34--;
//			    	count = 1;
//			    }
//			    else count++;
//				setTimer3(Ts);
				if (led12 - 1 != 0 ) led12--;
 80004ba:	4b3e      	ldr	r3, [pc, #248]	; (80005b4 <fsm_mode_led7seg+0x204>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d004      	beq.n	80004cc <fsm_mode_led7seg+0x11c>
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <fsm_mode_led7seg+0x204>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	4a3a      	ldr	r2, [pc, #232]	; (80005b4 <fsm_mode_led7seg+0x204>)
 80004ca:	6013      	str	r3, [r2, #0]
				if (led34 - 1 != 0 ) led34--;
 80004cc:	4b3a      	ldr	r3, [pc, #232]	; (80005b8 <fsm_mode_led7seg+0x208>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d004      	beq.n	80004de <fsm_mode_led7seg+0x12e>
 80004d4:	4b38      	ldr	r3, [pc, #224]	; (80005b8 <fsm_mode_led7seg+0x208>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3b01      	subs	r3, #1
 80004da:	4a37      	ldr	r2, [pc, #220]	; (80005b8 <fsm_mode_led7seg+0x208>)
 80004dc:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80004de:	20fa      	movs	r0, #250	; 0xfa
 80004e0:	f000 fd24 	bl	8000f2c <setTimer3>
			}
			break;
 80004e4:	e053      	b.n	800058e <fsm_mode_led7seg+0x1de>
		case MODE1_led7seg_4:
			if (timer3_flag == 1){
 80004e6:	4b32      	ldr	r3, [pc, #200]	; (80005b0 <fsm_mode_led7seg+0x200>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d151      	bne.n	8000592 <fsm_mode_led7seg+0x1e2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_1;
 80004ee:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 80004f0:	2214      	movs	r2, #20
 80004f2:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a2c      	ldr	r2, [pc, #176]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 80004fc:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80004fe:	20fa      	movs	r0, #250	; 0xfa
 8000500:	f000 fd14 	bl	8000f2c <setTimer3>
			}
			break;
 8000504:	e045      	b.n	8000592 <fsm_mode_led7seg+0x1e2>
		case MODE_MODIFY_led7seg_1:
			if (timer3_flag == 1){
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <fsm_mode_led7seg+0x200>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d143      	bne.n	8000596 <fsm_mode_led7seg+0x1e6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_2;
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 8000510:	221f      	movs	r2, #31
 8000512:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	4a24      	ldr	r2, [pc, #144]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 800051c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800051e:	20fa      	movs	r0, #250	; 0xfa
 8000520:	f000 fd04 	bl	8000f2c <setTimer3>
			}
			break;
 8000524:	e037      	b.n	8000596 <fsm_mode_led7seg+0x1e6>
		case MODE_MODIFY_led7seg_2:
			if (timer3_flag == 1){
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <fsm_mode_led7seg+0x200>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d135      	bne.n	800059a <fsm_mode_led7seg+0x1ea>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_3;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 8000530:	2220      	movs	r2, #32
 8000532:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 800053c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800053e:	20fa      	movs	r0, #250	; 0xfa
 8000540:	f000 fcf4 	bl	8000f2c <setTimer3>
			}
			break;
 8000544:	e029      	b.n	800059a <fsm_mode_led7seg+0x1ea>
		case MODE_MODIFY_led7seg_3:
			if (timer3_flag == 1){
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <fsm_mode_led7seg+0x200>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d127      	bne.n	800059e <fsm_mode_led7seg+0x1ee>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_4;
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 8000550:	2221      	movs	r2, #33	; 0x21
 8000552:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 800055a:	20fa      	movs	r0, #250	; 0xfa
 800055c:	f000 fce6 	bl	8000f2c <setTimer3>
			}
			break;
 8000560:	e01d      	b.n	800059e <fsm_mode_led7seg+0x1ee>
		case MODE_MODIFY_led7seg_4:
			if (timer3_flag == 1){
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <fsm_mode_led7seg+0x200>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d11b      	bne.n	80005a2 <fsm_mode_led7seg+0x1f2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_1;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <fsm_mode_led7seg+0x1f8>)
 800056c:	221e      	movs	r2, #30
 800056e:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <fsm_mode_led7seg+0x1fc>)
 8000578:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800057a:	20fa      	movs	r0, #250	; 0xfa
 800057c:	f000 fcd6 	bl	8000f2c <setTimer3>
			}
			break;
 8000580:	e00f      	b.n	80005a2 <fsm_mode_led7seg+0x1f2>
		default:
			break;
 8000582:	bf00      	nop
 8000584:	e00e      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
			break;
 8000586:	bf00      	nop
 8000588:	e00c      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
			break;
 800058a:	bf00      	nop
 800058c:	e00a      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
			break;
 800058e:	bf00      	nop
 8000590:	e008      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
			break;
 8000592:	bf00      	nop
 8000594:	e006      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
			break;
 8000596:	bf00      	nop
 8000598:	e004      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
			break;
 800059a:	bf00      	nop
 800059c:	e002      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
			break;
 800059e:	bf00      	nop
 80005a0:	e000      	b.n	80005a4 <fsm_mode_led7seg+0x1f4>
			break;
 80005a2:	bf00      	nop
	}
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000054 	.word	0x20000054
 80005ac:	2000005c 	.word	0x2000005c
 80005b0:	20000450 	.word	0x20000450
 80005b4:	20000014 	.word	0x20000014
 80005b8:	20000018 	.word	0x20000018

080005bc <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <isButtonflag+0x30>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d106      	bne.n	80005de <isButtonflag+0x22>
		flagForButton[index] = 0;
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <isButtonflag+0x30>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
		return 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	e000      	b.n	80005e0 <isButtonflag+0x24>
	}
	return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000078 	.word	0x20000078

080005f0 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d901      	bls.n	8000604 <is_button_pressed+0x14>
 8000600:	2300      	movs	r3, #0
 8000602:	e007      	b.n	8000614 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <is_button_pressed+0x30>)
 8000608:	5cd3      	ldrb	r3, [r2, r3]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2db      	uxtb	r3, r3
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000064 	.word	0x20000064

08000624 <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d901      	bls.n	8000638 <is_button_pressed_3s+0x14>
 8000634:	23ff      	movs	r3, #255	; 0xff
 8000636:	e007      	b.n	8000648 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <is_button_pressed_3s+0x30>)
 800063c:	5cd3      	ldrb	r3, [r2, r3]
 800063e:	2b01      	cmp	r3, #1
 8000640:	bf0c      	ite	eq
 8000642:	2301      	moveq	r3, #1
 8000644:	2300      	movne	r3, #0
 8000646:	b2db      	uxtb	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000074 	.word	0x20000074

08000658 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
int counter10S = 0;
void fsm_for_input_processing(uint8_t index ){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4a63      	ldr	r2, [pc, #396]	; (80007f4 <fsm_for_input_processing+0x19c>)
 8000666:	5cd3      	ldrb	r3, [r2, r3]
 8000668:	2b02      	cmp	r3, #2
 800066a:	f000 8089 	beq.w	8000780 <fsm_for_input_processing+0x128>
 800066e:	2b02      	cmp	r3, #2
 8000670:	f300 80bb 	bgt.w	80007ea <fsm_for_input_processing+0x192>
 8000674:	2b00      	cmp	r3, #0
 8000676:	d002      	beq.n	800067e <fsm_for_input_processing+0x26>
 8000678:	2b01      	cmp	r3, #1
 800067a:	d037      	beq.n	80006ec <fsm_for_input_processing+0x94>
					}
				}

			break ;
	}
}
 800067c:	e0b5      	b.n	80007ea <fsm_for_input_processing+0x192>
			if( is_button_pressed(index)){
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb5 	bl	80005f0 <is_button_pressed>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <fsm_for_input_processing+0x58>
				buttonState[index] = BUTTON_PRESSED ;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4a59      	ldr	r2, [pc, #356]	; (80007f4 <fsm_for_input_processing+0x19c>)
 8000690:	2101      	movs	r1, #1
 8000692:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4a58      	ldr	r2, [pc, #352]	; (80007f8 <fsm_for_input_processing+0x1a0>)
 8000698:	2100      	movs	r1, #0
 800069a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4a56      	ldr	r2, [pc, #344]	; (80007fc <fsm_for_input_processing+0x1a4>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a55      	ldr	r2, [pc, #340]	; (8000800 <fsm_for_input_processing+0x1a8>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	54d1      	strb	r1, [r2, r3]
			break ;
 80006ae:	e099      	b.n	80007e4 <fsm_for_input_processing+0x18c>
				if(timer4_flag==1 && status_mode != MODE1){
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <fsm_for_input_processing+0x1ac>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	f040 8095 	bne.w	80007e4 <fsm_for_input_processing+0x18c>
 80006ba:	4b53      	ldr	r3, [pc, #332]	; (8000808 <fsm_for_input_processing+0x1b0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	f000 8090 	beq.w	80007e4 <fsm_for_input_processing+0x18c>
					counter10S++;
 80006c4:	4b51      	ldr	r3, [pc, #324]	; (800080c <fsm_for_input_processing+0x1b4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	4a50      	ldr	r2, [pc, #320]	; (800080c <fsm_for_input_processing+0x1b4>)
 80006cc:	6013      	str	r3, [r2, #0]
					if(counter10S >= 10){
 80006ce:	4b4f      	ldr	r3, [pc, #316]	; (800080c <fsm_for_input_processing+0x1b4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b09      	cmp	r3, #9
 80006d4:	dd05      	ble.n	80006e2 <fsm_for_input_processing+0x8a>
						counter10S = 0;
 80006d6:	4b4d      	ldr	r3, [pc, #308]	; (800080c <fsm_for_input_processing+0x1b4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
						status_mode = INIT;
 80006dc:	4b4a      	ldr	r3, [pc, #296]	; (8000808 <fsm_for_input_processing+0x1b0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
					setTimer4(1000);
 80006e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e6:	f000 fc3b 	bl	8000f60 <setTimer4>
			break ;
 80006ea:	e07b      	b.n	80007e4 <fsm_for_input_processing+0x18c>
			counter10S = 0;
 80006ec:	4b47      	ldr	r3, [pc, #284]	; (800080c <fsm_for_input_processing+0x1b4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
			if (!is_button_pressed(index)){
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff7b 	bl	80005f0 <is_button_pressed>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10d      	bne.n	800071c <fsm_for_input_processing+0xc4>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4a3c      	ldr	r2, [pc, #240]	; (80007f4 <fsm_for_input_processing+0x19c>)
 8000704:	2100      	movs	r1, #0
 8000706:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4a3d      	ldr	r2, [pc, #244]	; (8000800 <fsm_for_input_processing+0x1a8>)
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4a39      	ldr	r2, [pc, #228]	; (80007f8 <fsm_for_input_processing+0x1a0>)
 8000714:	2100      	movs	r1, #0
 8000716:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 800071a:	e065      	b.n	80007e8 <fsm_for_input_processing+0x190>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4a36      	ldr	r2, [pc, #216]	; (80007f8 <fsm_for_input_processing+0x1a0>)
 8000720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000724:	2b63      	cmp	r3, #99	; 0x63
 8000726:	d809      	bhi.n	800073c <fsm_for_input_processing+0xe4>
						counterForButtonPress1s[index]++;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <fsm_for_input_processing+0x1a0>)
 800072c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000730:	3201      	adds	r2, #1
 8000732:	b291      	uxth	r1, r2
 8000734:	4a30      	ldr	r2, [pc, #192]	; (80007f8 <fsm_for_input_processing+0x1a0>)
 8000736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800073a:	e011      	b.n	8000760 <fsm_for_input_processing+0x108>
					flagForButtonPress1s[index] = 1;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	4a2f      	ldr	r2, [pc, #188]	; (80007fc <fsm_for_input_processing+0x1a4>)
 8000740:	2101      	movs	r1, #1
 8000742:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a2e      	ldr	r2, [pc, #184]	; (8000800 <fsm_for_input_processing+0x1a8>)
 8000748:	2101      	movs	r1, #1
 800074a:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4a30      	ldr	r2, [pc, #192]	; (8000810 <fsm_for_input_processing+0x1b8>)
 8000750:	2100      	movs	r1, #0
 8000752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <fsm_for_input_processing+0x1a0>)
 800075a:	2100      	movs	r1, #0
 800075c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff5e 	bl	8000624 <is_button_pressed_3s>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d03c      	beq.n	80007e8 <fsm_for_input_processing+0x190>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <fsm_for_input_processing+0x19c>)
 8000772:	2102      	movs	r1, #2
 8000774:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4a20      	ldr	r2, [pc, #128]	; (80007fc <fsm_for_input_processing+0x1a4>)
 800077a:	2100      	movs	r1, #0
 800077c:	54d1      	strb	r1, [r2, r3]
			break ;
 800077e:	e033      	b.n	80007e8 <fsm_for_input_processing+0x190>
			counter10S = 0;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <fsm_for_input_processing+0x1b4>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
			if (! is_button_pressed(index)){
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff31 	bl	80005f0 <is_button_pressed>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d10d      	bne.n	80007b0 <fsm_for_input_processing+0x158>
				buttonState[index] = BUTTON_RELEASED;
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <fsm_for_input_processing+0x19c>)
 8000798:	2100      	movs	r1, #0
 800079a:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <fsm_for_input_processing+0x1a8>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <fsm_for_input_processing+0x1b8>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 80007ae:	e01c      	b.n	80007ea <fsm_for_input_processing+0x192>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <fsm_for_input_processing+0x1b8>)
 80007b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b8:	2b13      	cmp	r3, #19
 80007ba:	d809      	bhi.n	80007d0 <fsm_for_input_processing+0x178>
							counterForButtonAfterPress1s[index]++;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <fsm_for_input_processing+0x1b8>)
 80007c0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007c4:	3201      	adds	r2, #1
 80007c6:	b291      	uxth	r1, r2
 80007c8:	4a11      	ldr	r2, [pc, #68]	; (8000810 <fsm_for_input_processing+0x1b8>)
 80007ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 80007ce:	e00c      	b.n	80007ea <fsm_for_input_processing+0x192>
						flagForButton[index] = 1;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <fsm_for_input_processing+0x1a8>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <fsm_for_input_processing+0x1b8>)
 80007dc:	2100      	movs	r1, #0
 80007de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 80007e2:	e002      	b.n	80007ea <fsm_for_input_processing+0x192>
			break ;
 80007e4:	bf00      	nop
 80007e6:	e000      	b.n	80007ea <fsm_for_input_processing+0x192>
			break ;
 80007e8:	bf00      	nop
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000008c 	.word	0x2000008c
 80007f8:	2000007c 	.word	0x2000007c
 80007fc:	20000074 	.word	0x20000074
 8000800:	20000078 	.word	0x20000078
 8000804:	20000454 	.word	0x20000454
 8000808:	20000048 	.word	0x20000048
 800080c:	20000090 	.word	0x20000090
 8000810:	20000084 	.word	0x20000084

08000814 <button_reading>:




void button_reading(void){
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 800081a:	2300      	movs	r3, #0
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	e051      	b.n	80008c4 <button_reading+0xb0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000820:	79fa      	ldrb	r2, [r7, #7]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	492b      	ldr	r1, [pc, #172]	; (80008d4 <button_reading+0xc0>)
 8000826:	5c89      	ldrb	r1, [r1, r2]
 8000828:	4a2b      	ldr	r2, [pc, #172]	; (80008d8 <button_reading+0xc4>)
 800082a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	492a      	ldr	r1, [pc, #168]	; (80008dc <button_reading+0xc8>)
 8000832:	5c89      	ldrb	r1, [r1, r2]
 8000834:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <button_reading+0xc0>)
 8000836:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d01a      	beq.n	8000874 <button_reading+0x60>
 800083e:	2b02      	cmp	r3, #2
 8000840:	dc22      	bgt.n	8000888 <button_reading+0x74>
 8000842:	2b00      	cmp	r3, #0
 8000844:	d002      	beq.n	800084c <button_reading+0x38>
 8000846:	2b01      	cmp	r3, #1
 8000848:	d00a      	beq.n	8000860 <button_reading+0x4c>
			  break;
//		  case 3: // read data from Button 1
//			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_P_GPIO_Port, BUTTON_P_Pin);
//			  break;
		  default:
			  break;
 800084a:	e01d      	b.n	8000888 <button_reading+0x74>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin);
 800084c:	79fc      	ldrb	r4, [r7, #7]
 800084e:	2101      	movs	r1, #1
 8000850:	4823      	ldr	r0, [pc, #140]	; (80008e0 <button_reading+0xcc>)
 8000852:	f001 f863 	bl	800191c <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <button_reading+0xc8>)
 800085c:	551a      	strb	r2, [r3, r4]
			  break;
 800085e:	e014      	b.n	800088a <button_reading+0x76>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 8000860:	79fc      	ldrb	r4, [r7, #7]
 8000862:	2102      	movs	r1, #2
 8000864:	481e      	ldr	r0, [pc, #120]	; (80008e0 <button_reading+0xcc>)
 8000866:	f001 f859 	bl	800191c <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <button_reading+0xc8>)
 8000870:	551a      	strb	r2, [r3, r4]
			  break;
 8000872:	e00a      	b.n	800088a <button_reading+0x76>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8000874:	79fc      	ldrb	r4, [r7, #7]
 8000876:	2110      	movs	r1, #16
 8000878:	4819      	ldr	r0, [pc, #100]	; (80008e0 <button_reading+0xcc>)
 800087a:	f001 f84f 	bl	800191c <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <button_reading+0xc8>)
 8000884:	551a      	strb	r2, [r3, r4]
			  break;
 8000886:	e000      	b.n	800088a <button_reading+0x76>
			  break;
 8000888:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <button_reading+0xc8>)
 800088e:	5cd2      	ldrb	r2, [r2, r3]
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4910      	ldr	r1, [pc, #64]	; (80008d4 <button_reading+0xc0>)
 8000894:	5ccb      	ldrb	r3, [r1, r3]
 8000896:	429a      	cmp	r2, r3
 8000898:	d111      	bne.n	80008be <button_reading+0xaa>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <button_reading+0xc0>)
 800089e:	5cd2      	ldrb	r2, [r2, r3]
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <button_reading+0xc4>)
 80008a4:	5ccb      	ldrb	r3, [r1, r3]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d109      	bne.n	80008be <button_reading+0xaa>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	490a      	ldr	r1, [pc, #40]	; (80008d8 <button_reading+0xc4>)
 80008b0:	5c89      	ldrb	r1, [r1, r2]
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <button_reading+0xd0>)
 80008b4:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fecd 	bl	8000658 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	3301      	adds	r3, #1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d9aa      	bls.n	8000820 <button_reading+0xc>
		  }

	}
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	2000006c 	.word	0x2000006c
 80008d8:	20000070 	.word	0x20000070
 80008dc:	20000068 	.word	0x20000068
 80008e0:	40010800 	.word	0x40010800
 80008e4:	20000064 	.word	0x20000064

080008e8 <onAllClock>:
	HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
}

void onAllClock(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <onAllClock+0x8c>)
 80008f4:	f001 f829 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2108      	movs	r1, #8
 80008fc:	481e      	ldr	r0, [pc, #120]	; (8000978 <onAllClock+0x90>)
 80008fe:	f001 f824 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <onAllClock+0x90>)
 8000908:	f001 f81f 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2110      	movs	r1, #16
 8000910:	4819      	ldr	r0, [pc, #100]	; (8000978 <onAllClock+0x90>)
 8000912:	f001 f81a 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091c:	4815      	ldr	r0, [pc, #84]	; (8000974 <onAllClock+0x8c>)
 800091e:	f001 f814 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000928:	4812      	ldr	r0, [pc, #72]	; (8000974 <onAllClock+0x8c>)
 800092a:	f001 f80e 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	4811      	ldr	r0, [pc, #68]	; (8000978 <onAllClock+0x90>)
 8000934:	f001 f809 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <onAllClock+0x8c>)
 800093e:	f001 f804 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <onAllClock+0x8c>)
 8000948:	f000 ffff 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2120      	movs	r1, #32
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <onAllClock+0x8c>)
 8000952:	f000 fffa 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <onAllClock+0x90>)
 800095e:	f000 fff4 	bl	800194a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <onAllClock+0x90>)
 800096a:	f000 ffee 	bl	800194a <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010800 	.word	0x40010800
 8000978:	40010c00 	.word	0x40010c00

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fcd8 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f850 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 f906 	bl	8000b98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800098c:	f000 f8da 	bl	8000b44 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000990:	f000 f88c 	bl	8000aac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000994:	481d      	ldr	r0, [pc, #116]	; (8000a0c <main+0x90>)
 8000996:	f001 fc7d 	bl	8002294 <HAL_TIM_Base_Start_IT>

  status_mode = INIT;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <main+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]

  setTimer1(1000);
 80009a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a4:	f000 fa8e 	bl	8000ec4 <setTimer1>
  setTimer2(1000);
 80009a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ac:	f000 faa4 	bl	8000ef8 <setTimer2>
  setTimer3(1000);
 80009b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b4:	f000 faba 	bl	8000f2c <setTimer3>
  setTimer4(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009bc:	f000 fad0 	bl	8000f60 <setTimer4>
  setTimer5(1000);
 80009c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c4:	f000 fae6 	bl	8000f94 <setTimer5>
  setTimer6(1000);
 80009c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009cc:	f000 fafc 	bl	8000fc8 <setTimer6>


  SCH_Init();
 80009d0:	f000 f97c 	bl	8000ccc <SCH_Init>

  SCH_Add_Task(timerRun, 0, 10);
 80009d4:	220a      	movs	r2, #10
 80009d6:	2100      	movs	r1, #0
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <main+0x98>)
 80009da:	f000 f983 	bl	8000ce4 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 10);
 80009de:	220a      	movs	r2, #10
 80009e0:	2100      	movs	r1, #0
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <main+0x9c>)
 80009e4:	f000 f97e 	bl	8000ce4 <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_run, 0 , 10);
 80009e8:	220a      	movs	r2, #10
 80009ea:	2100      	movs	r1, #0
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <main+0xa0>)
 80009ee:	f000 f979 	bl	8000ce4 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_1_run, 0 , 10);
 80009f2:	220a      	movs	r2, #10
 80009f4:	2100      	movs	r1, #0
 80009f6:	480a      	ldr	r0, [pc, #40]	; (8000a20 <main+0xa4>)
 80009f8:	f000 f974 	bl	8000ce4 <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_led7seg, 0, 10);
 80009fc:	220a      	movs	r2, #10
 80009fe:	2100      	movs	r1, #0
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <main+0xa8>)
 8000a02:	f000 f96f 	bl	8000ce4 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  onAllClock();
 8000a06:	f7ff ff6f 	bl	80008e8 <onAllClock>
 8000a0a:	e7fc      	b.n	8000a06 <main+0x8a>
 8000a0c:	20000094 	.word	0x20000094
 8000a10:	20000048 	.word	0x20000048
 8000a14:	08000ffd 	.word	0x08000ffd
 8000a18:	08000815 	.word	0x08000815
 8000a1c:	08000159 	.word	0x08000159
 8000a20:	0800014d 	.word	0x0800014d
 8000a24:	080003b1 	.word	0x080003b1

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b090      	sub	sp, #64	; 0x40
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0318 	add.w	r3, r7, #24
 8000a32:	2228      	movs	r2, #40	; 0x28
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 f8d6 	bl	8002be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a52:	2310      	movs	r3, #16
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a5e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 ffa9 	bl	80019c0 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a74:	f000 f924 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2102      	movs	r1, #2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fa16 	bl	8001ec4 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a9e:	f000 f90f 	bl	8000cc0 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3740      	adds	r7, #64	; 0x40
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000af2:	f001 fb7f 	bl	80021f4 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000afc:	f000 f8e0 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000b0e:	f001 fd1b 	bl	8002548 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b18:	f000 f8d2 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000b2a:	f001 feed 	bl	8002908 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f8c4 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000094 	.word	0x20000094

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_USART2_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	f001 ff34 	bl	80029e8 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 f89b 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000dc 	.word	0x200000dc
 8000b94:	40004400 	.word	0x40004400

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a38      	ldr	r2, [pc, #224]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b36      	ldr	r3, [pc, #216]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0320 	and.w	r3, r3, #32
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b33      	ldr	r3, [pc, #204]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a32      	ldr	r2, [pc, #200]	; (8000cac <MX_GPIO_Init+0x114>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_GPIO_Init+0x114>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_9_Pin|LED_8_Pin|LED_7_Pin|LED_4_Pin
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000c12:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <MX_GPIO_Init+0x118>)
 8000c14:	f000 fe99 	bl	800194a <HAL_GPIO_WritePin>
                          |LED_5_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_3_Pin|LED_2_Pin|LED_6_Pin
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 715e 	mov.w	r1, #888	; 0x378
 8000c1e:	4825      	ldr	r0, [pc, #148]	; (8000cb4 <MX_GPIO_Init+0x11c>)
 8000c20:	f000 fe93 	bl	800194a <HAL_GPIO_WritePin>
                          |LED_11_Pin|LED_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0x120>)
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4619      	mov	r1, r3
 8000c38:	4820      	ldr	r0, [pc, #128]	; (8000cbc <MX_GPIO_Init+0x124>)
 8000c3a:	f000 fceb 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin MODE_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin|MODE_Pin;
 8000c3e:	2313      	movs	r3, #19
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <MX_GPIO_Init+0x118>)
 8000c52:	f000 fcdf 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_9_Pin LED_8_Pin LED_7_Pin LED_4_Pin
                           LED_5_Pin LED_0_Pin */
  GPIO_InitStruct.Pin = LED_9_Pin|LED_8_Pin|LED_7_Pin|LED_4_Pin
 8000c56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c5a:	613b      	str	r3, [r7, #16]
                          |LED_5_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <MX_GPIO_Init+0x118>)
 8000c70:	f000 fcd0 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_3_Pin LED_2_Pin LED_6_Pin
                           LED_11_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_3_Pin|LED_2_Pin|LED_6_Pin
 8000c74:	f44f 735e 	mov.w	r3, #888	; 0x378
 8000c78:	613b      	str	r3, [r7, #16]
                          |LED_11_Pin|LED_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <MX_GPIO_Init+0x11c>)
 8000c8e:	f000 fcc1 	bl	8001614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2028      	movs	r0, #40	; 0x28
 8000c98:	f000 fc85 	bl	80015a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c9c:	2028      	movs	r0, #40	; 0x28
 8000c9e:	f000 fc9e 	bl	80015de <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40010c00 	.word	0x40010c00
 8000cb8:	10110000 	.word	0x10110000
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <SCH_Init>:
 */
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SCH_Init+0x14>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000440 	.word	0x20000440

08000ce4 <SCH_Add_Task>:

//int Tick = 10; // 10ms

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b27      	cmp	r3, #39	; 0x27
 8000cf6:	d84a      	bhi.n	8000d8e <SCH_Add_Task+0xaa>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <SCH_Add_Task+0xb8>)
 8000d00:	460b      	mov	r3, r1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TICK;
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <SCH_Add_Task+0xbc>)
 8000d18:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	491f      	ldr	r1, [pc, #124]	; (8000d9c <SCH_Add_Task+0xb8>)
 8000d20:	4603      	mov	r3, r0
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4403      	add	r3, r0
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD/TICK;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <SCH_Add_Task+0xbc>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	4917      	ldr	r1, [pc, #92]	; (8000d9c <SCH_Add_Task+0xb8>)
 8000d40:	4603      	mov	r3, r0
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4403      	add	r3, r0
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	3308      	adds	r3, #8
 8000d4c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <SCH_Add_Task+0xb8>)
 8000d56:	460b      	mov	r3, r1
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	330c      	adds	r3, #12
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4610      	mov	r0, r2
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SCH_Add_Task+0xb8>)
 8000d74:	460b      	mov	r3, r1
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3310      	adds	r3, #16
 8000d80:	6018      	str	r0, [r3, #0]


		current_index_task++;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <SCH_Add_Task+0xb4>)
 8000d8c:	701a      	strb	r2, [r3, #0]
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	20000440 	.word	0x20000440
 8000d9c:	20000120 	.word	0x20000120
 8000da0:	cccccccd 	.word	0xcccccccd

08000da4 <SCH_Update>:

void SCH_Update(void){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	e048      	b.n	8000e42 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0 ){
 8000db0:	492a      	ldr	r1, [pc, #168]	; (8000e5c <SCH_Update+0xb8>)
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d013      	beq.n	8000dee <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8000dc6:	4925      	ldr	r1, [pc, #148]	; (8000e5c <SCH_Update+0xb8>)
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1e59      	subs	r1, r3, #1
 8000dda:	4820      	ldr	r0, [pc, #128]	; (8000e5c <SCH_Update+0xb8>)
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4403      	add	r3, r0
 8000de8:	3304      	adds	r3, #4
 8000dea:	6019      	str	r1, [r3, #0]
 8000dec:	e026      	b.n	8000e3c <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay =SCH_tasks_G[i].Period;
 8000dee:	491b      	ldr	r1, [pc, #108]	; (8000e5c <SCH_Update+0xb8>)
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <SCH_Update+0xb8>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4403      	add	r3, r0
 8000e0e:	3304      	adds	r3, #4
 8000e10:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8000e12:	4912      	ldr	r1, [pc, #72]	; (8000e5c <SCH_Update+0xb8>)
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	330c      	adds	r3, #12
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2d8      	uxtb	r0, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <SCH_Update+0xb8>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	330c      	adds	r3, #12
 8000e38:	4602      	mov	r2, r0
 8000e3a:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < current_index_task; i++){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <SCH_Update+0xbc>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	dbb0      	blt.n	8000db0 <SCH_Update+0xc>
		}
	}
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000120 	.word	0x20000120
 8000e60:	20000440 	.word	0x20000440

08000e64 <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <clearTimer1+0x18>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <clearTimer1+0x1c>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000464 	.word	0x20000464
 8000e80:	20000448 	.word	0x20000448

08000e84 <clearTimer2>:
void clearTimer2(){
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <clearTimer2+0x18>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <clearTimer2+0x1c>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000468 	.word	0x20000468
 8000ea0:	2000044c 	.word	0x2000044c

08000ea4 <clearTimer3>:
void clearTimer3(){
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <clearTimer3+0x18>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <clearTimer3+0x1c>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	2000046c 	.word	0x2000046c
 8000ec0:	20000450 	.word	0x20000450

08000ec4 <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <setTimer1+0x28>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <setTimer1+0x2c>)
 8000ed8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <setTimer1+0x30>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000001c 	.word	0x2000001c
 8000ef0:	20000464 	.word	0x20000464
 8000ef4:	20000448 	.word	0x20000448

08000ef8 <setTimer2>:

void setTimer2( int duration){
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <setTimer2+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <setTimer2+0x2c>)
 8000f0c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <setTimer2+0x30>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000001c 	.word	0x2000001c
 8000f24:	20000468 	.word	0x20000468
 8000f28:	2000044c 	.word	0x2000044c

08000f2c <setTimer3>:

void setTimer3( int duration){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <setTimer3+0x28>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <setTimer3+0x2c>)
 8000f40:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <setTimer3+0x30>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000001c 	.word	0x2000001c
 8000f58:	2000046c 	.word	0x2000046c
 8000f5c:	20000450 	.word	0x20000450

08000f60 <setTimer4>:

void setTimer4( int duration){
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <setTimer4+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <setTimer4+0x2c>)
 8000f74:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <setTimer4+0x30>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000001c 	.word	0x2000001c
 8000f8c:	20000470 	.word	0x20000470
 8000f90:	20000454 	.word	0x20000454

08000f94 <setTimer5>:

void setTimer5( int duration){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <setTimer5+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <setTimer5+0x2c>)
 8000fa8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <setTimer5+0x30>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2000001c 	.word	0x2000001c
 8000fc0:	20000474 	.word	0x20000474
 8000fc4:	20000458 	.word	0x20000458

08000fc8 <setTimer6>:
void setTimer6( int duration){
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <setTimer6+0x28>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <setTimer6+0x2c>)
 8000fdc:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <setTimer6+0x30>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2000001c 	.word	0x2000001c
 8000ff4:	20000478 	.word	0x20000478
 8000ff8:	2000045c 	.word	0x2000045c

08000ffc <timerRun>:

void timerRun (){
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <timerRun+0xec>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dd0b      	ble.n	8001020 <timerRun+0x24>
		timer0_counter --;
 8001008:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <timerRun+0xec>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a36      	ldr	r2, [pc, #216]	; (80010e8 <timerRun+0xec>)
 8001010:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <timerRun+0xec>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dc02      	bgt.n	8001020 <timerRun+0x24>
			timer0_flag = 1;
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <timerRun+0xf0>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8001020:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <timerRun+0xf4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd0b      	ble.n	8001040 <timerRun+0x44>
		timer1_counter--;
 8001028:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <timerRun+0xf4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <timerRun+0xf4>)
 8001030:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <timerRun+0xf4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	dc02      	bgt.n	8001040 <timerRun+0x44>
			timer1_flag = 1;
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <timerRun+0xf8>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <timerRun+0xfc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dd0b      	ble.n	8001060 <timerRun+0x64>
		timer2_counter--;
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <timerRun+0xfc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <timerRun+0xfc>)
 8001050:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <timerRun+0xfc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	dc02      	bgt.n	8001060 <timerRun+0x64>
			timer2_flag = 1;
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <timerRun+0x100>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <timerRun+0x104>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	dd0b      	ble.n	8001080 <timerRun+0x84>
		timer3_counter--;
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <timerRun+0x104>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3b01      	subs	r3, #1
 800106e:	4a24      	ldr	r2, [pc, #144]	; (8001100 <timerRun+0x104>)
 8001070:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <timerRun+0x104>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	dc02      	bgt.n	8001080 <timerRun+0x84>
			timer3_flag = 1;
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <timerRun+0x108>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <timerRun+0x10c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	dd0b      	ble.n	80010a0 <timerRun+0xa4>
		timer4_counter--;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <timerRun+0x10c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <timerRun+0x10c>)
 8001090:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <timerRun+0x10c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	dc02      	bgt.n	80010a0 <timerRun+0xa4>
			timer4_flag = 1;
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <timerRun+0x110>)
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <timerRun+0x114>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd0b      	ble.n	80010c0 <timerRun+0xc4>
			timer5_counter--;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <timerRun+0x114>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <timerRun+0x114>)
 80010b0:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <timerRun+0x114>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	dc02      	bgt.n	80010c0 <timerRun+0xc4>
				timer5_flag = 1;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <timerRun+0x118>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <timerRun+0x11c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dd0b      	ble.n	80010e0 <timerRun+0xe4>
			timer6_counter--;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <timerRun+0x11c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <timerRun+0x11c>)
 80010d0:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <timerRun+0x11c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dc02      	bgt.n	80010e0 <timerRun+0xe4>
				timer6_flag = 1;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <timerRun+0x120>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
			}
		}
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	20000460 	.word	0x20000460
 80010ec:	20000444 	.word	0x20000444
 80010f0:	20000464 	.word	0x20000464
 80010f4:	20000448 	.word	0x20000448
 80010f8:	20000468 	.word	0x20000468
 80010fc:	2000044c 	.word	0x2000044c
 8001100:	2000046c 	.word	0x2000046c
 8001104:	20000450 	.word	0x20000450
 8001108:	20000470 	.word	0x20000470
 800110c:	20000454 	.word	0x20000454
 8001110:	20000474 	.word	0x20000474
 8001114:	20000458 	.word	0x20000458
 8001118:	20000478 	.word	0x20000478
 800111c:	2000045c 	.word	0x2000045c

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_MspInit+0x5c>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a14      	ldr	r2, [pc, #80]	; (800117c <HAL_MspInit+0x5c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_MspInit+0x5c>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_MspInit+0x5c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_MspInit+0x5c>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_MspInit+0x5c>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_MspInit+0x60>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_MspInit+0x60>)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000

08001184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001194:	d113      	bne.n	80011be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_TIM_Base_MspInit+0x44>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_TIM_Base_MspInit+0x44>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_TIM_Base_MspInit+0x44>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	201c      	movs	r0, #28
 80011b4:	f000 f9f7 	bl	80015a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b8:	201c      	movs	r0, #28
 80011ba:	f000 fa10 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <HAL_UART_MspInit+0x70>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d123      	bne.n	8001234 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x74>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <HAL_UART_MspInit+0x74>)
 80011f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f6:	61d3      	str	r3, [r2, #28]
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_UART_MspInit+0x74>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_UART_MspInit+0x74>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_UART_MspInit+0x74>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_UART_MspInit+0x74>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800121c:	230c      	movs	r3, #12
 800121e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2302      	movs	r3, #2
 8001226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_UART_MspInit+0x78>)
 8001230:	f000 f9f0 	bl	8001614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40004400 	.word	0x40004400
 8001240:	40021000 	.word	0x40021000
 8001244:	40010800 	.word	0x40010800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 f897 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TIM2_IRQHandler+0x10>)
 800129e:	f001 f84b 	bl	8002338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000094 	.word	0x20000094

080012ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012b4:	f000 fb62 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d8:	d101      	bne.n	80012de <HAL_TIM_PeriodElapsedCallback+0x16>
//		button_reading();
//		timerRun();
		//getKeyInput();
		SCH_Update();
 80012da:	f7ff fd63 	bl	8000da4 <SCH_Update>
	}
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	; (800132c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800130e:	f7ff ffd5 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f001 fc45 	bl	8002ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001316:	f7ff fb31 	bl	800097c <main>
  bx lr
 800131a:	4770      	bx	lr
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001324:	08002c40 	.word	0x08002c40
  ldr r2, =_sbss
 8001328:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800132c:	20000480 	.word	0x20000480

08001330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC1_2_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_Init+0x28>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_Init+0x28>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f923 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f808 	bl	8001360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001350:	f7ff fee6 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40022000 	.word	0x40022000

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x54>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x58>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	fbb3 f3f1 	udiv	r3, r3, r1
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f93b 	bl	80015fa <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00e      	b.n	80013ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d80a      	bhi.n	80013aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 f903 	bl	80015a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_InitTick+0x5c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000020 	.word	0x20000020
 80013b8:	20000028 	.word	0x20000028
 80013bc:	20000024 	.word	0x20000024

080013c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x1c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x20>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_IncTick+0x20>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	20000028 	.word	0x20000028
 80013e0:	2000047c 	.word	0x2000047c

080013e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <HAL_GetTick+0x10>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	2000047c 	.word	0x2000047c

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4906      	ldr	r1, [pc, #24]	; (8001490 <__NVIC_EnableIRQ+0x34>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	210f      	movs	r1, #15
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff90 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff2d 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff42 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff90 	bl	80014e8 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5f 	bl	8001494 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff35 	bl	800145c <__NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffa2 	bl	800154c <SysTick_Config>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	e169      	b.n	80018fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001628:	2201      	movs	r2, #1
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 8158 	bne.w	80018f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4a9a      	ldr	r2, [pc, #616]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d05e      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001650:	4a98      	ldr	r2, [pc, #608]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d875      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001656:	4a98      	ldr	r2, [pc, #608]	; (80018b8 <HAL_GPIO_Init+0x2a4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d058      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 800165c:	4a96      	ldr	r2, [pc, #600]	; (80018b8 <HAL_GPIO_Init+0x2a4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d86f      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001662:	4a96      	ldr	r2, [pc, #600]	; (80018bc <HAL_GPIO_Init+0x2a8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d052      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001668:	4a94      	ldr	r2, [pc, #592]	; (80018bc <HAL_GPIO_Init+0x2a8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d869      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800166e:	4a94      	ldr	r2, [pc, #592]	; (80018c0 <HAL_GPIO_Init+0x2ac>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d04c      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001674:	4a92      	ldr	r2, [pc, #584]	; (80018c0 <HAL_GPIO_Init+0x2ac>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d863      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800167a:	4a92      	ldr	r2, [pc, #584]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d046      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001680:	4a90      	ldr	r2, [pc, #576]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d85d      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001686:	2b12      	cmp	r3, #18
 8001688:	d82a      	bhi.n	80016e0 <HAL_GPIO_Init+0xcc>
 800168a:	2b12      	cmp	r3, #18
 800168c:	d859      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <HAL_GPIO_Init+0x80>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	0800170f 	.word	0x0800170f
 8001698:	080016e9 	.word	0x080016e9
 800169c:	080016fb 	.word	0x080016fb
 80016a0:	0800173d 	.word	0x0800173d
 80016a4:	08001743 	.word	0x08001743
 80016a8:	08001743 	.word	0x08001743
 80016ac:	08001743 	.word	0x08001743
 80016b0:	08001743 	.word	0x08001743
 80016b4:	08001743 	.word	0x08001743
 80016b8:	08001743 	.word	0x08001743
 80016bc:	08001743 	.word	0x08001743
 80016c0:	08001743 	.word	0x08001743
 80016c4:	08001743 	.word	0x08001743
 80016c8:	08001743 	.word	0x08001743
 80016cc:	08001743 	.word	0x08001743
 80016d0:	08001743 	.word	0x08001743
 80016d4:	08001743 	.word	0x08001743
 80016d8:	080016f1 	.word	0x080016f1
 80016dc:	08001705 	.word	0x08001705
 80016e0:	4a79      	ldr	r2, [pc, #484]	; (80018c8 <HAL_GPIO_Init+0x2b4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016e6:	e02c      	b.n	8001742 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e029      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	3304      	adds	r3, #4
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e024      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e01f      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	330c      	adds	r3, #12
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e01a      	b.n	8001744 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001716:	2304      	movs	r3, #4
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e013      	b.n	8001744 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	611a      	str	r2, [r3, #16]
          break;
 800172e:	e009      	b.n	8001744 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	615a      	str	r2, [r3, #20]
          break;
 800173a:	e003      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e000      	b.n	8001744 <HAL_GPIO_Init+0x130>
          break;
 8001742:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d801      	bhi.n	800174e <HAL_GPIO_Init+0x13a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	e001      	b.n	8001752 <HAL_GPIO_Init+0x13e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3304      	adds	r3, #4
 8001752:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2bff      	cmp	r3, #255	; 0xff
 8001758:	d802      	bhi.n	8001760 <HAL_GPIO_Init+0x14c>
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x152>
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	3b08      	subs	r3, #8
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	210f      	movs	r1, #15
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	6a39      	ldr	r1, [r7, #32]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80b1 	beq.w	80018f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_GPIO_Init+0x2b8>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a4c      	ldr	r2, [pc, #304]	; (80018cc <HAL_GPIO_Init+0x2b8>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_GPIO_Init+0x2b8>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ac:	4a48      	ldr	r2, [pc, #288]	; (80018d0 <HAL_GPIO_Init+0x2bc>)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a40      	ldr	r2, [pc, #256]	; (80018d4 <HAL_GPIO_Init+0x2c0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d013      	beq.n	8001800 <HAL_GPIO_Init+0x1ec>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a3f      	ldr	r2, [pc, #252]	; (80018d8 <HAL_GPIO_Init+0x2c4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00d      	beq.n	80017fc <HAL_GPIO_Init+0x1e8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a3e      	ldr	r2, [pc, #248]	; (80018dc <HAL_GPIO_Init+0x2c8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d007      	beq.n	80017f8 <HAL_GPIO_Init+0x1e4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a3d      	ldr	r2, [pc, #244]	; (80018e0 <HAL_GPIO_Init+0x2cc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_GPIO_Init+0x1e0>
 80017f0:	2303      	movs	r3, #3
 80017f2:	e006      	b.n	8001802 <HAL_GPIO_Init+0x1ee>
 80017f4:	2304      	movs	r3, #4
 80017f6:	e004      	b.n	8001802 <HAL_GPIO_Init+0x1ee>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x1ee>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_GPIO_Init+0x1ee>
 8001800:	2300      	movs	r3, #0
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	f002 0203 	and.w	r2, r2, #3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4093      	lsls	r3, r2
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001812:	492f      	ldr	r1, [pc, #188]	; (80018d0 <HAL_GPIO_Init+0x2bc>)
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	492c      	ldr	r1, [pc, #176]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	4928      	ldr	r1, [pc, #160]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001844:	4013      	ands	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4922      	ldr	r1, [pc, #136]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	491e      	ldr	r1, [pc, #120]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800186c:	4013      	ands	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	4918      	ldr	r1, [pc, #96]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4914      	ldr	r1, [pc, #80]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001894:	4013      	ands	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d021      	beq.n	80018e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
 80018b0:	e021      	b.n	80018f6 <HAL_GPIO_Init+0x2e2>
 80018b2:	bf00      	nop
 80018b4:	10320000 	.word	0x10320000
 80018b8:	10310000 	.word	0x10310000
 80018bc:	10220000 	.word	0x10220000
 80018c0:	10210000 	.word	0x10210000
 80018c4:	10120000 	.word	0x10120000
 80018c8:	10110000 	.word	0x10110000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40010800 	.word	0x40010800
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40011400 	.word	0x40011400
 80018e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_GPIO_Init+0x304>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	4909      	ldr	r1, [pc, #36]	; (8001918 <HAL_GPIO_Init+0x304>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	f47f ae8e 	bne.w	8001628 <HAL_GPIO_Init+0x14>
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	372c      	adds	r7, #44	; 0x2c
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40010400 	.word	0x40010400

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]
 8001956:	4613      	mov	r3, r2
 8001958:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195a:	787b      	ldrb	r3, [r7, #1]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001966:	e003      	b.n	8001970 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	041a      	lsls	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
	...

0800197c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f806 	bl	80019ac <HAL_GPIO_EXTI_Callback>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e272      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8087 	beq.w	8001aee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e0:	4b92      	ldr	r3, [pc, #584]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d00c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ec:	4b8f      	ldr	r3, [pc, #572]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d112      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5e>
 80019f8:	4b8c      	ldr	r3, [pc, #560]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a04:	d10b      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a06:	4b89      	ldr	r3, [pc, #548]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d06c      	beq.n	8001aec <HAL_RCC_OscConfig+0x12c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d168      	bne.n	8001aec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e24c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x76>
 8001a28:	4b80      	ldr	r3, [pc, #512]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a7f      	ldr	r2, [pc, #508]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e02e      	b.n	8001a94 <HAL_RCC_OscConfig+0xd4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x98>
 8001a3e:	4b7b      	ldr	r3, [pc, #492]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a7a      	ldr	r2, [pc, #488]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b78      	ldr	r3, [pc, #480]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a77      	ldr	r2, [pc, #476]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e01d      	b.n	8001a94 <HAL_RCC_OscConfig+0xd4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0xbc>
 8001a62:	4b72      	ldr	r3, [pc, #456]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a71      	ldr	r2, [pc, #452]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a6e      	ldr	r2, [pc, #440]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xd4>
 8001a7c:	4b6b      	ldr	r3, [pc, #428]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6a      	ldr	r2, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a67      	ldr	r2, [pc, #412]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fca2 	bl	80013e4 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fc9e 	bl	80013e4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e200      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b5d      	ldr	r3, [pc, #372]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xe4>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fc8e 	bl	80013e4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fc8a 	bl	80013e4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1ec      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x10c>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d063      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afa:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b06:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d11c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x18c>
 8001b12:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x176>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e1c0      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4939      	ldr	r1, [pc, #228]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	e03a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b54:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fc43 	bl	80013e4 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff fc3f 	bl	80013e4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1a1      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4927      	ldr	r1, [pc, #156]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e015      	b.n	8001bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc22 	bl	80013e4 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fc1e 	bl	80013e4 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e180      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d03a      	beq.n	8001c44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d019      	beq.n	8001c0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fc02 	bl	80013e4 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fbfe 	bl	80013e4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e160      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f000 fad8 	bl	80021b8 <RCC_Delay>
 8001c08:	e01c      	b.n	8001c44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7ff fbe8 	bl	80013e4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c16:	e00f      	b.n	8001c38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c18:	f7ff fbe4 	bl	80013e4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d908      	bls.n	8001c38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e146      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	42420000 	.word	0x42420000
 8001c34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	4b92      	ldr	r3, [pc, #584]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1e9      	bne.n	8001c18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80a6 	beq.w	8001d9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c56:	4b8b      	ldr	r3, [pc, #556]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10d      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a87      	ldr	r2, [pc, #540]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_RCC_OscConfig+0x4c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	4b7f      	ldr	r3, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0x4c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7e      	ldr	r2, [pc, #504]	; (8001e88 <HAL_RCC_OscConfig+0x4c8>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fba5 	bl	80013e4 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7ff fba1 	bl	80013e4 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	; 0x64
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e103      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0x4c8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x312>
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	e02d      	b.n	8001d2e <HAL_RCC_OscConfig+0x36e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x334>
 8001cda:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a69      	ldr	r2, [pc, #420]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a66      	ldr	r2, [pc, #408]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6213      	str	r3, [r2, #32]
 8001cf2:	e01c      	b.n	8001d2e <HAL_RCC_OscConfig+0x36e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x356>
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a60      	ldr	r2, [pc, #384]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	e00b      	b.n	8001d2e <HAL_RCC_OscConfig+0x36e>
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 0304 	bic.w	r3, r3, #4
 8001d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d015      	beq.n	8001d62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fb55 	bl	80013e4 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7ff fb51 	bl	80013e4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0b1      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ee      	beq.n	8001d3e <HAL_RCC_OscConfig+0x37e>
 8001d60:	e014      	b.n	8001d8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fb3f 	bl	80013e4 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7ff fb3b 	bl	80013e4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e09b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ee      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a3b      	ldr	r2, [pc, #236]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d061      	beq.n	8001e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d146      	bne.n	8001e4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fb0f 	bl	80013e4 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7ff fb0b 	bl	80013e4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e06d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d108      	bne.n	8001e04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4921      	ldr	r1, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a19      	ldr	r1, [r3, #32]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	430b      	orrs	r3, r1
 8001e16:	491b      	ldr	r1, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fadf 	bl	80013e4 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff fadb 	bl	80013e4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e03d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x46a>
 8001e48:	e035      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fac8 	bl	80013e4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff fac4 	bl	80013e4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e026      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x498>
 8001e76:	e01e      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e019      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_OscConfig+0x500>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0d0      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d910      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b67      	ldr	r3, [pc, #412]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4965      	ldr	r1, [pc, #404]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0b8      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	494d      	ldr	r1, [pc, #308]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d040      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d115      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07f      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e073      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06b      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b39      	ldr	r3, [pc, #228]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4936      	ldr	r1, [pc, #216]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff fa16 	bl	80013e4 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7ff fa12 	bl	80013e4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e053      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d210      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 0207 	bic.w	r2, r3, #7
 8001ffa:	4922      	ldr	r1, [pc, #136]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e032      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4916      	ldr	r1, [pc, #88]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002052:	f000 f821 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	490a      	ldr	r1, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1cc>)
 800206c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1d0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f974 	bl	8001360 <HAL_InitTick>

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
 800208c:	08002c20 	.word	0x08002c20
 8002090:	20000020 	.word	0x20000020
 8002094:	20000024 	.word	0x20000024

08002098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b490      	push	{r4, r7}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_GetSysClockFreq+0xac>)
 80020a0:	1d3c      	adds	r4, r7, #4
 80020a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020a8:	f240 2301 	movw	r3, #513	; 0x201
 80020ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x40>
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x46>
 80020d6:	e02b      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020da:	623b      	str	r3, [r7, #32]
      break;
 80020dc:	e02b      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	0c9b      	lsrs	r3, r3, #18
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3328      	adds	r3, #40	; 0x28
 80020e8:	443b      	add	r3, r7
 80020ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	0c5b      	lsrs	r3, r3, #17
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	3328      	adds	r3, #40	; 0x28
 8002106:	443b      	add	r3, r7
 8002108:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800210c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002112:	fb03 f202 	mul.w	r2, r3, r2
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
 800211e:	e004      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	623b      	str	r3, [r7, #32]
      break;
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002132:	623b      	str	r3, [r7, #32]
      break;
 8002134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002136:	6a3b      	ldr	r3, [r7, #32]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bc90      	pop	{r4, r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	08002c10 	.word	0x08002c10
 8002148:	40021000 	.word	0x40021000
 800214c:	007a1200 	.word	0x007a1200
 8002150:	003d0900 	.word	0x003d0900

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <HAL_RCC_GetHCLKFreq+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	20000020 	.word	0x20000020

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff2 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	08002c30 	.word	0x08002c30

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002194:	f7ff ffde 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0adb      	lsrs	r3, r3, #11
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08002c30 	.word	0x08002c30

080021b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <RCC_Delay+0x34>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <RCC_Delay+0x38>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0a5b      	lsrs	r3, r3, #9
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021d4:	bf00      	nop
  }
  while (Delay --);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	60fa      	str	r2, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <RCC_Delay+0x1c>
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000020 	.word	0x20000020
 80021f0:	10624dd3 	.word	0x10624dd3

080021f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e041      	b.n	800228a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe ffb2 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 fa70 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d001      	beq.n	80022ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e03a      	b.n	8002322 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_TIM_Base_Start_IT+0x98>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00e      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x58>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d6:	d009      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x58>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <HAL_TIM_Base_Start_IT+0x9c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x58>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <HAL_TIM_Base_Start_IT+0xa0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d111      	bne.n	8002310 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d010      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	e007      	b.n	8002320 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40000400 	.word	0x40000400
 8002334:	40000800 	.word	0x40000800

08002338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d122      	bne.n	8002394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b02      	cmp	r3, #2
 800235a:	d11b      	bne.n	8002394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0202 	mvn.w	r2, #2
 8002364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f9b1 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f9a4 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f9b3 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d122      	bne.n	80023e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11b      	bne.n	80023e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0204 	mvn.w	r2, #4
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f987 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f97a 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f989 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d122      	bne.n	800243c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b08      	cmp	r3, #8
 8002402:	d11b      	bne.n	800243c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0208 	mvn.w	r2, #8
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f95d 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f950 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f95f 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b10      	cmp	r3, #16
 8002448:	d122      	bne.n	8002490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b10      	cmp	r3, #16
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0210 	mvn.w	r2, #16
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2208      	movs	r2, #8
 8002466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f933 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f926 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f935 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0201 	mvn.w	r2, #1
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe ff06 	bl	80012c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa77 	bl	80029d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8f9 	bl	8002706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b20      	cmp	r3, #32
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b20      	cmp	r3, #32
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0220 	mvn.w	r2, #32
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fa42 	bl	80029c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_TIM_ConfigClockSource+0x18>
 800255c:	2302      	movs	r3, #2
 800255e:	e0b3      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x180>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800257e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002598:	d03e      	beq.n	8002618 <HAL_TIM_ConfigClockSource+0xd0>
 800259a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259e:	f200 8087 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	f000 8085 	beq.w	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d87f      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025b0:	2b70      	cmp	r3, #112	; 0x70
 80025b2:	d01a      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0xa2>
 80025b4:	2b70      	cmp	r3, #112	; 0x70
 80025b6:	d87b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025b8:	2b60      	cmp	r3, #96	; 0x60
 80025ba:	d050      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x116>
 80025bc:	2b60      	cmp	r3, #96	; 0x60
 80025be:	d877      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025c0:	2b50      	cmp	r3, #80	; 0x50
 80025c2:	d03c      	beq.n	800263e <HAL_TIM_ConfigClockSource+0xf6>
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d873      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d058      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x136>
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d86f      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025d0:	2b30      	cmp	r3, #48	; 0x30
 80025d2:	d064      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x156>
 80025d4:	2b30      	cmp	r3, #48	; 0x30
 80025d6:	d86b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d060      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x156>
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d867      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05c      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x156>
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d05a      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025e8:	e062      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f000 f966 	bl	80028ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800260c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	609a      	str	r2, [r3, #8]
      break;
 8002616:	e04e      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f000 f94f 	bl	80028ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263a:	609a      	str	r2, [r3, #8]
      break;
 800263c:	e03b      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	461a      	mov	r2, r3
 800264c:	f000 f8c6 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2150      	movs	r1, #80	; 0x50
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f91d 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 800265c:	e02b      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	461a      	mov	r2, r3
 800266c:	f000 f8e4 	bl	8002838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2160      	movs	r1, #96	; 0x60
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f90d 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 800267c:	e01b      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	461a      	mov	r2, r3
 800268c:	f000 f8a6 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2140      	movs	r1, #64	; 0x40
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f8fd 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 800269c:	e00b      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f000 f8f4 	bl	8002896 <TIM_ITRx_SetConfig>
        break;
 80026ae:	e002      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026b0:	bf00      	nop
 80026b2:	e000      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <TIM_Base_SetConfig+0xb8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00b      	beq.n	8002748 <TIM_Base_SetConfig+0x30>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d007      	beq.n	8002748 <TIM_Base_SetConfig+0x30>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <TIM_Base_SetConfig+0xbc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0x30>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <TIM_Base_SetConfig+0xc0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <TIM_Base_SetConfig+0xb8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00b      	beq.n	800277a <TIM_Base_SetConfig+0x62>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <TIM_Base_SetConfig+0xbc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x62>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <TIM_Base_SetConfig+0xc0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d108      	bne.n	800278c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <TIM_Base_SetConfig+0xb8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800

080027dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 030a 	bic.w	r3, r3, #10
 8002818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f023 0210 	bic.w	r2, r3, #16
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	031b      	lsls	r3, r3, #12
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002874:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f043 0307 	orr.w	r3, r3, #7
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b087      	sub	sp, #28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	021a      	lsls	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	609a      	str	r2, [r3, #8]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800291c:	2302      	movs	r3, #2
 800291e:	e046      	b.n	80029ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a16      	ldr	r2, [pc, #88]	; (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00e      	beq.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296c:	d009      	beq.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10c      	bne.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4313      	orrs	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800

080029c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e03f      	b.n	8002a7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe fbdc 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f829 	bl	8002a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002abe:	f023 030c 	bic.w	r3, r3, #12
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <UART_SetConfig+0x114>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002aec:	f7ff fb50 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	e002      	b.n	8002afa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002af4:	f7ff fb38 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8002af8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <UART_SetConfig+0x118>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	0119      	lsls	r1, r3, #4
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009a      	lsls	r2, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <UART_SetConfig+0x118>)
 8002b32:	fba3 0302 	umull	r0, r3, r3, r2
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2064      	movs	r0, #100	; 0x64
 8002b3a:	fb00 f303 	mul.w	r3, r0, r3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	3332      	adds	r3, #50	; 0x32
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <UART_SetConfig+0x118>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b50:	4419      	add	r1, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	009a      	lsls	r2, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <UART_SetConfig+0x118>)
 8002b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2064      	movs	r0, #100	; 0x64
 8002b72:	fb00 f303 	mul.w	r3, r0, r3
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	3332      	adds	r3, #50	; 0x32
 8002b7c:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <UART_SetConfig+0x118>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	f003 020f 	and.w	r2, r3, #15
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	440a      	add	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	51eb851f 	.word	0x51eb851f

08002ba0 <__libc_init_array>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	4d0c      	ldr	r5, [pc, #48]	; (8002bd8 <__libc_init_array+0x38>)
 8002ba6:	4c0d      	ldr	r4, [pc, #52]	; (8002bdc <__libc_init_array+0x3c>)
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	42a6      	cmp	r6, r4
 8002bae:	d109      	bne.n	8002bc4 <__libc_init_array+0x24>
 8002bb0:	f000 f822 	bl	8002bf8 <_init>
 8002bb4:	2600      	movs	r6, #0
 8002bb6:	4d0a      	ldr	r5, [pc, #40]	; (8002be0 <__libc_init_array+0x40>)
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	; (8002be4 <__libc_init_array+0x44>)
 8002bba:	1b64      	subs	r4, r4, r5
 8002bbc:	10a4      	asrs	r4, r4, #2
 8002bbe:	42a6      	cmp	r6, r4
 8002bc0:	d105      	bne.n	8002bce <__libc_init_array+0x2e>
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
 8002bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc8:	4798      	blx	r3
 8002bca:	3601      	adds	r6, #1
 8002bcc:	e7ee      	b.n	8002bac <__libc_init_array+0xc>
 8002bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd2:	4798      	blx	r3
 8002bd4:	3601      	adds	r6, #1
 8002bd6:	e7f2      	b.n	8002bbe <__libc_init_array+0x1e>
 8002bd8:	08002c38 	.word	0x08002c38
 8002bdc:	08002c38 	.word	0x08002c38
 8002be0:	08002c38 	.word	0x08002c38
 8002be4:	08002c3c 	.word	0x08002c3c

08002be8 <memset>:
 8002be8:	4603      	mov	r3, r0
 8002bea:	4402      	add	r2, r0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <memset+0xa>
 8002bf0:	4770      	bx	lr
 8002bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bf6:	e7f9      	b.n	8002bec <memset+0x4>

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
