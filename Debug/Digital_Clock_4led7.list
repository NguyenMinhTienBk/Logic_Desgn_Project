
Digital_Clock_4led7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004038  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800416c  0800416c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800416c  0800416c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800416c  0800416c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  2000001c  08004190  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08004190  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b93e  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215b  00000000  00000000  0002b983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0002dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  0002e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d56  00000000  00000000  0002f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eed1  00000000  00000000  0003225e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab8b  00000000  00000000  0004112f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cbcba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003664  00000000  00000000  000cbd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800412c 	.word	0x0800412c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800412c 	.word	0x0800412c

0800014c <clock>:


#include "clock.h"


void clock(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	second++;
 8000150:	4b13      	ldr	r3, [pc, #76]	; (80001a0 <clock+0x54>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <clock+0x54>)
 8000158:	6013      	str	r3, [r2, #0]
	if ( second >= 60) {
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <clock+0x54>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b3b      	cmp	r3, #59	; 0x3b
 8000160:	dd07      	ble.n	8000172 <clock+0x26>
		second = 0;
 8000162:	4b0f      	ldr	r3, [pc, #60]	; (80001a0 <clock+0x54>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
		minute++;
 8000168:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <clock+0x58>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	3301      	adds	r3, #1
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <clock+0x58>)
 8000170:	6013      	str	r3, [r2, #0]
	}
	if( minute >= 60) {
 8000172:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <clock+0x58>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b3b      	cmp	r3, #59	; 0x3b
 8000178:	dd07      	ble.n	800018a <clock+0x3e>
		minute = 0;
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <clock+0x58>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
		hour++;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <clock+0x5c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	3301      	adds	r3, #1
 8000186:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <clock+0x5c>)
 8000188:	6013      	str	r3, [r2, #0]
	}
	if( hour >= 24){
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <clock+0x5c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b17      	cmp	r3, #23
 8000190:	dd02      	ble.n	8000198 <clock+0x4c>
	 hour = 0;
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <clock+0x5c>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
	}
//	updateLedBuffer(hour , minute);
//	updateLedBuffer(minute , second);
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000064 	.word	0x20000064
 80001a4:	20000068 	.word	0x20000068
 80001a8:	2000006c 	.word	0x2000006c

080001ac <setClock>:

void setClock(int h, int m, int s ){
 80001ac:	b480      	push	{r7}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	607a      	str	r2, [r7, #4]
	second = s;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <setClock+0x28>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
	minute = m;
 80001be:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <setClock+0x2c>)
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	6013      	str	r3, [r2, #0]
	hour = h;
 80001c4:	4a05      	ldr	r2, [pc, #20]	; (80001dc <setClock+0x30>)
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	6013      	str	r3, [r2, #0]
}
 80001ca:	bf00      	nop
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	20000064 	.word	0x20000064
 80001d8:	20000068 	.word	0x20000068
 80001dc:	2000006c 	.word	0x2000006c

080001e0 <fsm_buz_run>:
 */


#include <fsm_buz.h>

void fsm_buz_run(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	switch(status_buz){
 80001e4:	4b2d      	ldr	r3, [pc, #180]	; (800029c <fsm_buz_run+0xbc>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b2b      	cmp	r3, #43	; 0x2b
 80001ea:	d036      	beq.n	800025a <fsm_buz_run+0x7a>
 80001ec:	2b2b      	cmp	r3, #43	; 0x2b
 80001ee:	dc4b      	bgt.n	8000288 <fsm_buz_run+0xa8>
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d03f      	beq.n	8000274 <fsm_buz_run+0x94>
 80001f4:	2b29      	cmp	r3, #41	; 0x29
 80001f6:	d147      	bne.n	8000288 <fsm_buz_run+0xa8>
	case BUZ_OFF:
		if ((hour == hourAlarm && minute == minuteAlarm && second == secondAlarm))
 80001f8:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <fsm_buz_run+0xc0>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <fsm_buz_run+0xc4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	d114      	bne.n	800022e <fsm_buz_run+0x4e>
 8000204:	4b28      	ldr	r3, [pc, #160]	; (80002a8 <fsm_buz_run+0xc8>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b28      	ldr	r3, [pc, #160]	; (80002ac <fsm_buz_run+0xcc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	429a      	cmp	r2, r3
 800020e:	d10e      	bne.n	800022e <fsm_buz_run+0x4e>
 8000210:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <fsm_buz_run+0xd0>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <fsm_buz_run+0xd4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	429a      	cmp	r2, r3
 800021a:	d108      	bne.n	800022e <fsm_buz_run+0x4e>
		{
					Buzzer_On();
 800021c:	f001 f916 	bl	800144c <Buzzer_On>
					status_buz = BUZ_ON_ALARM;
 8000220:	4b1e      	ldr	r3, [pc, #120]	; (800029c <fsm_buz_run+0xbc>)
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	601a      	str	r2, [r3, #0]
					setTimer5(3000);
 8000226:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800022a:	f001 fd89 	bl	8001d40 <setTimer5>
		}

		if (led12 <= 0 && led34 <= 0 && status_mode == ON_STOPWATCH){
 800022e:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <fsm_buz_run+0xd8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	dc2a      	bgt.n	800028c <fsm_buz_run+0xac>
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <fsm_buz_run+0xdc>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	dc26      	bgt.n	800028c <fsm_buz_run+0xac>
 800023e:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <fsm_buz_run+0xe0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b08      	cmp	r3, #8
 8000244:	d122      	bne.n	800028c <fsm_buz_run+0xac>
			Buzzer_On();
 8000246:	f001 f901 	bl	800144c <Buzzer_On>
			status_buz = BUZ_ON_STOPWATCH;
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <fsm_buz_run+0xbc>)
 800024c:	222b      	movs	r2, #43	; 0x2b
 800024e:	601a      	str	r2, [r3, #0]
			setTimer5(3000);
 8000250:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000254:	f001 fd74 	bl	8001d40 <setTimer5>
		}
		break;
 8000258:	e018      	b.n	800028c <fsm_buz_run+0xac>

	case BUZ_ON_STOPWATCH:

		if (timer5_flag == 1){
 800025a:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <fsm_buz_run+0xe4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d116      	bne.n	8000290 <fsm_buz_run+0xb0>
			Buzzer_Off();
 8000262:	f001 f905 	bl	8001470 <Buzzer_Off>
			status_buz = BUZ_OFF;
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <fsm_buz_run+0xbc>)
 8000268:	2229      	movs	r2, #41	; 0x29
 800026a:	601a      	str	r2, [r3, #0]
			status_mode = MODE3;
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <fsm_buz_run+0xe0>)
 800026e:	2203      	movs	r2, #3
 8000270:	601a      	str	r2, [r3, #0]
		}
		break;
 8000272:	e00d      	b.n	8000290 <fsm_buz_run+0xb0>

	case BUZ_ON_ALARM:

		if (timer5_flag == 1){
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <fsm_buz_run+0xe4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d10b      	bne.n	8000294 <fsm_buz_run+0xb4>
			Buzzer_Off();
 800027c:	f001 f8f8 	bl	8001470 <Buzzer_Off>
			status_buz = BUZ_OFF;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <fsm_buz_run+0xbc>)
 8000282:	2229      	movs	r2, #41	; 0x29
 8000284:	601a      	str	r2, [r3, #0]
		}
		break;
 8000286:	e005      	b.n	8000294 <fsm_buz_run+0xb4>

	default:
		break;
 8000288:	bf00      	nop
 800028a:	e004      	b.n	8000296 <fsm_buz_run+0xb6>
		break;
 800028c:	bf00      	nop
 800028e:	e002      	b.n	8000296 <fsm_buz_run+0xb6>
		break;
 8000290:	bf00      	nop
 8000292:	e000      	b.n	8000296 <fsm_buz_run+0xb6>
		break;
 8000294:	bf00      	nop

	}


}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	2000003c 	.word	0x2000003c
 80002a0:	2000006c 	.word	0x2000006c
 80002a4:	20000048 	.word	0x20000048
 80002a8:	20000068 	.word	0x20000068
 80002ac:	2000004c 	.word	0x2000004c
 80002b0:	20000064 	.word	0x20000064
 80002b4:	20000050 	.word	0x20000050
 80002b8:	2000005c 	.word	0x2000005c
 80002bc:	20000060 	.word	0x20000060
 80002c0:	20000038 	.word	0x20000038
 80002c4:	200004c0 	.word	0x200004c0

080002c8 <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	switch (status_mode){
 80002cc:	4b80      	ldr	r3, [pc, #512]	; (80004d0 <fsm_mode_run+0x208>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b11      	cmp	r3, #17
 80002d2:	f200 83ea 	bhi.w	8000aaa <fsm_mode_run+0x7e2>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_mode_run+0x14>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	08000325 	.word	0x08000325
 80002e0:	08000333 	.word	0x08000333
 80002e4:	08000397 	.word	0x08000397
 80002e8:	080005dd 	.word	0x080005dd
 80002ec:	080008c3 	.word	0x080008c3
 80002f0:	08000aab 	.word	0x08000aab
 80002f4:	08000aab 	.word	0x08000aab
 80002f8:	08000aab 	.word	0x08000aab
 80002fc:	08000771 	.word	0x08000771
 8000300:	08000aab 	.word	0x08000aab
 8000304:	08000aab 	.word	0x08000aab
 8000308:	08000aab 	.word	0x08000aab
 800030c:	080009ed 	.word	0x080009ed
 8000310:	08000913 	.word	0x08000913
 8000314:	0800051d 	.word	0x0800051d
 8000318:	08000411 	.word	0x08000411
 800031c:	08000803 	.word	0x08000803
 8000320:	08000695 	.word	0x08000695
	case INIT:
		status_mode = MODE1;
 8000324:	4b6a      	ldr	r3, [pc, #424]	; (80004d0 <fsm_mode_run+0x208>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
		status_buz = BUZ_OFF;
 800032a:	4b6a      	ldr	r3, [pc, #424]	; (80004d4 <fsm_mode_run+0x20c>)
 800032c:	2229      	movs	r2, #41	; 0x29
 800032e:	601a      	str	r2, [r3, #0]
//		status_led7seg = INIT;
//		index_led = 0;
		//setTimer1(500);
		break;
 8000330:	e3d2      	b.n	8000ad8 <fsm_mode_run+0x810>

	case MODE1:
		updateLedBuffer(minute , second);
 8000332:	4b69      	ldr	r3, [pc, #420]	; (80004d8 <fsm_mode_run+0x210>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a69      	ldr	r2, [pc, #420]	; (80004dc <fsm_mode_run+0x214>)
 8000338:	6812      	ldr	r2, [r2, #0]
 800033a:	4611      	mov	r1, r2
 800033c:	4618      	mov	r0, r3
 800033e:	f000 ff81 	bl	8001244 <updateLedBuffer>
		if (isButtonflag(butM) == 1){
 8000342:	4b67      	ldr	r3, [pc, #412]	; (80004e0 <fsm_mode_run+0x218>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fbda 	bl	8000b00 <isButtonflag>
 800034c:	4603      	mov	r3, r0
 800034e:	2b01      	cmp	r3, #1
 8000350:	d112      	bne.n	8000378 <fsm_mode_run+0xb0>
//			clearTimer1();
//			clearTimer2();
//			clearTimer3();
			status_mode = MODE2;
 8000352:	4b5f      	ldr	r3, [pc, #380]	; (80004d0 <fsm_mode_run+0x208>)
 8000354:	2202      	movs	r2, #2
 8000356:	601a      	str	r2, [r3, #0]
			led12 = hourAlarm;
 8000358:	4b62      	ldr	r3, [pc, #392]	; (80004e4 <fsm_mode_run+0x21c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a62      	ldr	r2, [pc, #392]	; (80004e8 <fsm_mode_run+0x220>)
 800035e:	6013      	str	r3, [r2, #0]
			led34 = minuteAlarm;
 8000360:	4b62      	ldr	r3, [pc, #392]	; (80004ec <fsm_mode_run+0x224>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a62      	ldr	r2, [pc, #392]	; (80004f0 <fsm_mode_run+0x228>)
 8000366:	6013      	str	r3, [r2, #0]
			updateLedBuffer(led12, led34);
 8000368:	4b5f      	ldr	r3, [pc, #380]	; (80004e8 <fsm_mode_run+0x220>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a60      	ldr	r2, [pc, #384]	; (80004f0 <fsm_mode_run+0x228>)
 800036e:	6812      	ldr	r2, [r2, #0]
 8000370:	4611      	mov	r1, r2
 8000372:	4618      	mov	r0, r3
 8000374:	f000 ff66 	bl	8001244 <updateLedBuffer>
//			setTimer3(1000);
		}
			  if (timer1_flag == 1){
 8000378:	4b5e      	ldr	r3, [pc, #376]	; (80004f4 <fsm_mode_run+0x22c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	f040 8396 	bne.w	8000aae <fsm_mode_run+0x7e6>
				  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000386:	485c      	ldr	r0, [pc, #368]	; (80004f8 <fsm_mode_run+0x230>)
 8000388:	f002 fa1d 	bl	80027c6 <HAL_GPIO_TogglePin>
				  setTimer1(500);
 800038c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000390:	f001 fc6e 	bl	8001c70 <setTimer1>
			  }

		break;
 8000394:	e38b      	b.n	8000aae <fsm_mode_run+0x7e6>

	case MODE2: // Alarm
		if (isButtonflag(butM) == 1){
 8000396:	4b52      	ldr	r3, [pc, #328]	; (80004e0 <fsm_mode_run+0x218>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fbb0 	bl	8000b00 <isButtonflag>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d112      	bne.n	80003cc <fsm_mode_run+0x104>
//			clearTimer1();
//			clearTimer2();
//			clearTimer3();
			status_mode = MODE3;
 80003a6:	4b4a      	ldr	r3, [pc, #296]	; (80004d0 <fsm_mode_run+0x208>)
 80003a8:	2203      	movs	r2, #3
 80003aa:	601a      	str	r2, [r3, #0]
			led12 = hourStopWatch;
 80003ac:	4b53      	ldr	r3, [pc, #332]	; (80004fc <fsm_mode_run+0x234>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a4d      	ldr	r2, [pc, #308]	; (80004e8 <fsm_mode_run+0x220>)
 80003b2:	6013      	str	r3, [r2, #0]
			led34 = minuteStopWatch;
 80003b4:	4b52      	ldr	r3, [pc, #328]	; (8000500 <fsm_mode_run+0x238>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a4d      	ldr	r2, [pc, #308]	; (80004f0 <fsm_mode_run+0x228>)
 80003ba:	6013      	str	r3, [r2, #0]

//			led12 = minuteStopWatch;
//			led34 = secondStopWatch;
			updateLedBuffer(led12, led34);
 80003bc:	4b4a      	ldr	r3, [pc, #296]	; (80004e8 <fsm_mode_run+0x220>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a4b      	ldr	r2, [pc, #300]	; (80004f0 <fsm_mode_run+0x228>)
 80003c2:	6812      	ldr	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 ff3c 	bl	8001244 <updateLedBuffer>
			//setTimer3(1000);
		}
		if(isButtonflag(butS)==1){
 80003cc:	4b4d      	ldr	r3, [pc, #308]	; (8000504 <fsm_mode_run+0x23c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 fb95 	bl	8000b00 <isButtonflag>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d10a      	bne.n	80003f2 <fsm_mode_run+0x12a>
			status_mode = MODIFY_HOUR_ALARM;
 80003dc:	4b3c      	ldr	r3, [pc, #240]	; (80004d0 <fsm_mode_run+0x208>)
 80003de:	220f      	movs	r2, #15
 80003e0:	601a      	str	r2, [r3, #0]
			led12 = hourAlarm;
 80003e2:	4b40      	ldr	r3, [pc, #256]	; (80004e4 <fsm_mode_run+0x21c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a40      	ldr	r2, [pc, #256]	; (80004e8 <fsm_mode_run+0x220>)
 80003e8:	6013      	str	r3, [r2, #0]
			led34 = minuteAlarm;
 80003ea:	4b40      	ldr	r3, [pc, #256]	; (80004ec <fsm_mode_run+0x224>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a40      	ldr	r2, [pc, #256]	; (80004f0 <fsm_mode_run+0x228>)
 80003f0:	6013      	str	r3, [r2, #0]
		}

		  if (timer2_flag == 1){
 80003f2:	4b45      	ldr	r3, [pc, #276]	; (8000508 <fsm_mode_run+0x240>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	f040 835b 	bne.w	8000ab2 <fsm_mode_run+0x7ea>
			  HAL_GPIO_TogglePin(LED_YEL_GPIO_Port, LED_YEL_Pin);
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	483d      	ldr	r0, [pc, #244]	; (80004f8 <fsm_mode_run+0x230>)
 8000402:	f002 f9e0 	bl	80027c6 <HAL_GPIO_TogglePin>
			  setTimer2(500);
 8000406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040a:	f001 fc4b 	bl	8001ca4 <setTimer2>
//			if (led34 > 99){
//				led34 = 0;
//			}
//		}

		break;
 800040e:	e350      	b.n	8000ab2 <fsm_mode_run+0x7ea>

	case MODIFY_HOUR_ALARM:

		  if (timer3_flag == 1){
 8000410:	4b3e      	ldr	r3, [pc, #248]	; (800050c <fsm_mode_run+0x244>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d107      	bne.n	8000428 <fsm_mode_run+0x160>
			  HAL_GPIO_TogglePin(LED_GRE_GPIO_Port, LED_GRE_Pin);
 8000418:	2101      	movs	r1, #1
 800041a:	483d      	ldr	r0, [pc, #244]	; (8000510 <fsm_mode_run+0x248>)
 800041c:	f002 f9d3 	bl	80027c6 <HAL_GPIO_TogglePin>
			  setTimer3(500);
 8000420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000424:	f001 fc58 	bl	8001cd8 <setTimer3>
		  }

		if (isButtonflag(butM) == 1){
 8000428:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <fsm_mode_run+0x218>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fb67 	bl	8000b00 <isButtonflag>
 8000432:	4603      	mov	r3, r0
 8000434:	2b01      	cmp	r3, #1
 8000436:	d102      	bne.n	800043e <fsm_mode_run+0x176>
			status_mode = MODE3;
 8000438:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <fsm_mode_run+0x208>)
 800043a:	2203      	movs	r2, #3
 800043c:	601a      	str	r2, [r3, #0]
		}

		if (isButtonflag(butU) == 1){
 800043e:	4b35      	ldr	r3, [pc, #212]	; (8000514 <fsm_mode_run+0x24c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fb5c 	bl	8000b00 <isButtonflag>
 8000448:	4603      	mov	r3, r0
 800044a:	2b01      	cmp	r3, #1
 800044c:	d113      	bne.n	8000476 <fsm_mode_run+0x1ae>
			led12++;
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <fsm_mode_run+0x220>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	4a24      	ldr	r2, [pc, #144]	; (80004e8 <fsm_mode_run+0x220>)
 8000456:	6013      	str	r3, [r2, #0]

			if (led12 > 23){
 8000458:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <fsm_mode_run+0x220>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b17      	cmp	r3, #23
 800045e:	dd02      	ble.n	8000466 <fsm_mode_run+0x19e>
				led12 = 0;
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <fsm_mode_run+0x220>)
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 8000466:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <fsm_mode_run+0x220>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <fsm_mode_run+0x228>)
 800046c:	6812      	ldr	r2, [r2, #0]
 800046e:	4611      	mov	r1, r2
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fee7 	bl	8001244 <updateLedBuffer>
		}

		if (isButtonflag(butD) == 1){
 8000476:	4b28      	ldr	r3, [pc, #160]	; (8000518 <fsm_mode_run+0x250>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fb40 	bl	8000b00 <isButtonflag>
 8000480:	4603      	mov	r3, r0
 8000482:	2b01      	cmp	r3, #1
 8000484:	d113      	bne.n	80004ae <fsm_mode_run+0x1e6>
			led12--;
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <fsm_mode_run+0x220>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <fsm_mode_run+0x220>)
 800048e:	6013      	str	r3, [r2, #0]

			if (led12 < 0){
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <fsm_mode_run+0x220>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da02      	bge.n	800049e <fsm_mode_run+0x1d6>
				led12 = 23;
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <fsm_mode_run+0x220>)
 800049a:	2217      	movs	r2, #23
 800049c:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <fsm_mode_run+0x220>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <fsm_mode_run+0x228>)
 80004a4:	6812      	ldr	r2, [r2, #0]
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fecb 	bl	8001244 <updateLedBuffer>
		}

		if(isButtonflag(butS)==1){
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <fsm_mode_run+0x23c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fb24 	bl	8000b00 <isButtonflag>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	f040 82fb 	bne.w	8000ab6 <fsm_mode_run+0x7ee>
			hourAlarm = led12;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <fsm_mode_run+0x220>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <fsm_mode_run+0x21c>)
 80004c6:	6013      	str	r3, [r2, #0]
			status_mode = MODIFY_MINUTE_ALARM;
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <fsm_mode_run+0x208>)
 80004ca:	220e      	movs	r2, #14
 80004cc:	601a      	str	r2, [r3, #0]
		}

		break;
 80004ce:	e2f2      	b.n	8000ab6 <fsm_mode_run+0x7ee>
 80004d0:	20000038 	.word	0x20000038
 80004d4:	2000003c 	.word	0x2000003c
 80004d8:	20000068 	.word	0x20000068
 80004dc:	20000064 	.word	0x20000064
 80004e0:	20000044 	.word	0x20000044
 80004e4:	20000048 	.word	0x20000048
 80004e8:	2000005c 	.word	0x2000005c
 80004ec:	2000004c 	.word	0x2000004c
 80004f0:	20000060 	.word	0x20000060
 80004f4:	200004b0 	.word	0x200004b0
 80004f8:	40010c00 	.word	0x40010c00
 80004fc:	20000054 	.word	0x20000054
 8000500:	20000058 	.word	0x20000058
 8000504:	20000000 	.word	0x20000000
 8000508:	200004b4 	.word	0x200004b4
 800050c:	200004b8 	.word	0x200004b8
 8000510:	40011000 	.word	0x40011000
 8000514:	20000004 	.word	0x20000004
 8000518:	20000008 	.word	0x20000008

	case MODIFY_MINUTE_ALARM:

		if (isButtonflag(butM) == 1){
 800051c:	4b87      	ldr	r3, [pc, #540]	; (800073c <fsm_mode_run+0x474>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 faed 	bl	8000b00 <isButtonflag>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d102      	bne.n	8000532 <fsm_mode_run+0x26a>
			status_mode = MODE3;
 800052c:	4b84      	ldr	r3, [pc, #528]	; (8000740 <fsm_mode_run+0x478>)
 800052e:	2203      	movs	r2, #3
 8000530:	601a      	str	r2, [r3, #0]
		}

		if (isButtonflag(butU) == 1){
 8000532:	4b84      	ldr	r3, [pc, #528]	; (8000744 <fsm_mode_run+0x47c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fae2 	bl	8000b00 <isButtonflag>
 800053c:	4603      	mov	r3, r0
 800053e:	2b01      	cmp	r3, #1
 8000540:	d113      	bne.n	800056a <fsm_mode_run+0x2a2>
			led34++;
 8000542:	4b81      	ldr	r3, [pc, #516]	; (8000748 <fsm_mode_run+0x480>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a7f      	ldr	r2, [pc, #508]	; (8000748 <fsm_mode_run+0x480>)
 800054a:	6013      	str	r3, [r2, #0]

			if (led34 > 59){
 800054c:	4b7e      	ldr	r3, [pc, #504]	; (8000748 <fsm_mode_run+0x480>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b3b      	cmp	r3, #59	; 0x3b
 8000552:	dd02      	ble.n	800055a <fsm_mode_run+0x292>
				led34 = 0;
 8000554:	4b7c      	ldr	r3, [pc, #496]	; (8000748 <fsm_mode_run+0x480>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 800055a:	4b7c      	ldr	r3, [pc, #496]	; (800074c <fsm_mode_run+0x484>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a7a      	ldr	r2, [pc, #488]	; (8000748 <fsm_mode_run+0x480>)
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fe6d 	bl	8001244 <updateLedBuffer>
		}

		if (isButtonflag(butD) == 1){
 800056a:	4b79      	ldr	r3, [pc, #484]	; (8000750 <fsm_mode_run+0x488>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fac6 	bl	8000b00 <isButtonflag>
 8000574:	4603      	mov	r3, r0
 8000576:	2b01      	cmp	r3, #1
 8000578:	d113      	bne.n	80005a2 <fsm_mode_run+0x2da>
			led34--;
 800057a:	4b73      	ldr	r3, [pc, #460]	; (8000748 <fsm_mode_run+0x480>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	4a71      	ldr	r2, [pc, #452]	; (8000748 <fsm_mode_run+0x480>)
 8000582:	6013      	str	r3, [r2, #0]

			if (led34 < 0){
 8000584:	4b70      	ldr	r3, [pc, #448]	; (8000748 <fsm_mode_run+0x480>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	da02      	bge.n	8000592 <fsm_mode_run+0x2ca>
				led34 = 59;
 800058c:	4b6e      	ldr	r3, [pc, #440]	; (8000748 <fsm_mode_run+0x480>)
 800058e:	223b      	movs	r2, #59	; 0x3b
 8000590:	601a      	str	r2, [r3, #0]
			}

			updateLedBuffer(led12, led34);
 8000592:	4b6e      	ldr	r3, [pc, #440]	; (800074c <fsm_mode_run+0x484>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a6c      	ldr	r2, [pc, #432]	; (8000748 <fsm_mode_run+0x480>)
 8000598:	6812      	ldr	r2, [r2, #0]
 800059a:	4611      	mov	r1, r2
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fe51 	bl	8001244 <updateLedBuffer>
		}

		if(isButtonflag(butS)==1){
 80005a2:	4b6c      	ldr	r3, [pc, #432]	; (8000754 <fsm_mode_run+0x48c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 faaa 	bl	8000b00 <isButtonflag>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	f040 8283 	bne.w	8000aba <fsm_mode_run+0x7f2>
			minuteAlarm = led34;
 80005b4:	4b64      	ldr	r3, [pc, #400]	; (8000748 <fsm_mode_run+0x480>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a67      	ldr	r2, [pc, #412]	; (8000758 <fsm_mode_run+0x490>)
 80005ba:	6013      	str	r3, [r2, #0]
			status_mode = MODE2;
 80005bc:	4b60      	ldr	r3, [pc, #384]	; (8000740 <fsm_mode_run+0x478>)
 80005be:	2202      	movs	r2, #2
 80005c0:	601a      	str	r2, [r3, #0]
			led12 = hourAlarm;
 80005c2:	4b66      	ldr	r3, [pc, #408]	; (800075c <fsm_mode_run+0x494>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a61      	ldr	r2, [pc, #388]	; (800074c <fsm_mode_run+0x484>)
 80005c8:	6013      	str	r3, [r2, #0]
//			led34 = minuteAlarm;
			updateLedBuffer(led12, led34);
 80005ca:	4b60      	ldr	r3, [pc, #384]	; (800074c <fsm_mode_run+0x484>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a5e      	ldr	r2, [pc, #376]	; (8000748 <fsm_mode_run+0x480>)
 80005d0:	6812      	ldr	r2, [r2, #0]
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fe35 	bl	8001244 <updateLedBuffer>
		}
		break;
 80005da:	e26e      	b.n	8000aba <fsm_mode_run+0x7f2>

	case MODE3: //Stop Watch

		if (isButtonflag(butM) == 1){
 80005dc:	4b57      	ldr	r3, [pc, #348]	; (800073c <fsm_mode_run+0x474>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fa8d 	bl	8000b00 <isButtonflag>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d112      	bne.n	8000612 <fsm_mode_run+0x34a>
//			clearTimer1();
//			clearTimer2();
//			clearTimer3();
			status_mode = MODE4;
 80005ec:	4b54      	ldr	r3, [pc, #336]	; (8000740 <fsm_mode_run+0x478>)
 80005ee:	2204      	movs	r2, #4
 80005f0:	601a      	str	r2, [r3, #0]
//			led12 = hourStopWatch;
//			led34 = minuteStopWatch;

			led12 = hour;
 80005f2:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <fsm_mode_run+0x498>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a55      	ldr	r2, [pc, #340]	; (800074c <fsm_mode_run+0x484>)
 80005f8:	6013      	str	r3, [r2, #0]
			led34 = minute;
 80005fa:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <fsm_mode_run+0x49c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a52      	ldr	r2, [pc, #328]	; (8000748 <fsm_mode_run+0x480>)
 8000600:	6013      	str	r3, [r2, #0]
			updateLedBuffer(led12, led34);
 8000602:	4b52      	ldr	r3, [pc, #328]	; (800074c <fsm_mode_run+0x484>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a50      	ldr	r2, [pc, #320]	; (8000748 <fsm_mode_run+0x480>)
 8000608:	6812      	ldr	r2, [r2, #0]
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fe19 	bl	8001244 <updateLedBuffer>
			//setTimer3(1000);
		}
		if(isButtonflag(butS)==1){
 8000612:	4b50      	ldr	r3, [pc, #320]	; (8000754 <fsm_mode_run+0x48c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fa72 	bl	8000b00 <isButtonflag>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d112      	bne.n	8000648 <fsm_mode_run+0x380>
			status_mode = MODIFY_HOUR_STOPWATCH;
 8000622:	4b47      	ldr	r3, [pc, #284]	; (8000740 <fsm_mode_run+0x478>)
 8000624:	2211      	movs	r2, #17
 8000626:	601a      	str	r2, [r3, #0]
			led12 = hourStopWatch;
 8000628:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <fsm_mode_run+0x4a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a47      	ldr	r2, [pc, #284]	; (800074c <fsm_mode_run+0x484>)
 800062e:	6013      	str	r3, [r2, #0]
			led34 = minuteStopWatch;
 8000630:	4b4e      	ldr	r3, [pc, #312]	; (800076c <fsm_mode_run+0x4a4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a44      	ldr	r2, [pc, #272]	; (8000748 <fsm_mode_run+0x480>)
 8000636:	6013      	str	r3, [r2, #0]
			updateLedBuffer(led12, led34);
 8000638:	4b44      	ldr	r3, [pc, #272]	; (800074c <fsm_mode_run+0x484>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a42      	ldr	r2, [pc, #264]	; (8000748 <fsm_mode_run+0x480>)
 800063e:	6812      	ldr	r2, [r2, #0]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fdfe 	bl	8001244 <updateLedBuffer>
		}

		if(isButtonflag(butU)==1 && isButtonflag(butD)==1){
 8000648:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <fsm_mode_run+0x47c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fa57 	bl	8000b00 <isButtonflag>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	f040 8232 	bne.w	8000abe <fsm_mode_run+0x7f6>
 800065a:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <fsm_mode_run+0x488>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fa4e 	bl	8000b00 <isButtonflag>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	f040 8229 	bne.w	8000abe <fsm_mode_run+0x7f6>
			status_mode = ON_STOPWATCH;
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <fsm_mode_run+0x478>)
 800066e:	2208      	movs	r2, #8
 8000670:	601a      	str	r2, [r3, #0]
			led12 = hourStopWatch;
 8000672:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <fsm_mode_run+0x4a0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a35      	ldr	r2, [pc, #212]	; (800074c <fsm_mode_run+0x484>)
 8000678:	6013      	str	r3, [r2, #0]
			led34 = minuteStopWatch;
 800067a:	4b3c      	ldr	r3, [pc, #240]	; (800076c <fsm_mode_run+0x4a4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a32      	ldr	r2, [pc, #200]	; (8000748 <fsm_mode_run+0x480>)
 8000680:	6013      	str	r3, [r2, #0]
			updateLedBuffer(led12, led34);
 8000682:	4b32      	ldr	r3, [pc, #200]	; (800074c <fsm_mode_run+0x484>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a30      	ldr	r2, [pc, #192]	; (8000748 <fsm_mode_run+0x480>)
 8000688:	6812      	ldr	r2, [r2, #0]
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fdd9 	bl	8001244 <updateLedBuffer>
		}

		break;
 8000692:	e214      	b.n	8000abe <fsm_mode_run+0x7f6>
//		  if (timer3_flag == 1){
//			  HAL_GPIO_TogglePin(LED_GRE_GPIO_Port, LED_GRE_Pin);
//			  setTimer3(500);
//		  }

		if (isButtonflag(butM) == 1){
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <fsm_mode_run+0x474>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fa31 	bl	8000b00 <isButtonflag>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d102      	bne.n	80006aa <fsm_mode_run+0x3e2>
			status_mode = MODE4;
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <fsm_mode_run+0x478>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	601a      	str	r2, [r3, #0]
		}

		if (isButtonflag(butU) == 1){
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <fsm_mode_run+0x47c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fa26 	bl	8000b00 <isButtonflag>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d113      	bne.n	80006e2 <fsm_mode_run+0x41a>
			led12++;
 80006ba:	4b24      	ldr	r3, [pc, #144]	; (800074c <fsm_mode_run+0x484>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a22      	ldr	r2, [pc, #136]	; (800074c <fsm_mode_run+0x484>)
 80006c2:	6013      	str	r3, [r2, #0]

			if (led12 > 23){
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <fsm_mode_run+0x484>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b17      	cmp	r3, #23
 80006ca:	dd02      	ble.n	80006d2 <fsm_mode_run+0x40a>
				led12 = 0;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <fsm_mode_run+0x484>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <fsm_mode_run+0x484>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <fsm_mode_run+0x480>)
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fdb1 	bl	8001244 <updateLedBuffer>
		}

		if (isButtonflag(butD) == 1){
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <fsm_mode_run+0x488>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fa0a 	bl	8000b00 <isButtonflag>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d113      	bne.n	800071a <fsm_mode_run+0x452>
			led12--;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <fsm_mode_run+0x484>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <fsm_mode_run+0x484>)
 80006fa:	6013      	str	r3, [r2, #0]

			if (led12 < 0){
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <fsm_mode_run+0x484>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	da02      	bge.n	800070a <fsm_mode_run+0x442>
				led12 = 23;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <fsm_mode_run+0x484>)
 8000706:	2217      	movs	r2, #23
 8000708:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <fsm_mode_run+0x484>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <fsm_mode_run+0x480>)
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	4611      	mov	r1, r2
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fd95 	bl	8001244 <updateLedBuffer>
		}

		if(isButtonflag(butS)==1){
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <fsm_mode_run+0x48c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f9ee 	bl	8000b00 <isButtonflag>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	f040 81cb 	bne.w	8000ac2 <fsm_mode_run+0x7fa>
			hourStopWatch = led12;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <fsm_mode_run+0x484>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <fsm_mode_run+0x4a0>)
 8000732:	6013      	str	r3, [r2, #0]
			status_mode = MODIFY_MINUTE_STOPWATCH;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <fsm_mode_run+0x478>)
 8000736:	2210      	movs	r2, #16
 8000738:	601a      	str	r2, [r3, #0]
		}

		break;
 800073a:	e1c2      	b.n	8000ac2 <fsm_mode_run+0x7fa>
 800073c:	20000044 	.word	0x20000044
 8000740:	20000038 	.word	0x20000038
 8000744:	20000004 	.word	0x20000004
 8000748:	20000060 	.word	0x20000060
 800074c:	2000005c 	.word	0x2000005c
 8000750:	20000008 	.word	0x20000008
 8000754:	20000000 	.word	0x20000000
 8000758:	2000004c 	.word	0x2000004c
 800075c:	20000048 	.word	0x20000048
 8000760:	2000006c 	.word	0x2000006c
 8000764:	20000068 	.word	0x20000068
 8000768:	20000054 	.word	0x20000054
 800076c:	20000058 	.word	0x20000058

//		  if (timer3_flag == 1){
//			  HAL_GPIO_TogglePin(LED_GRE_GPIO_Port, LED_GRE_Pin);
//			  setTimer3(500);
//		  }
		if(timer6_flag == 1){
 8000770:	4b92      	ldr	r3, [pc, #584]	; (80009bc <fsm_mode_run+0x6f4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d128      	bne.n	80007ca <fsm_mode_run+0x502>
			if ( led34 > 0 && led12 >= 0 ){
 8000778:	4b91      	ldr	r3, [pc, #580]	; (80009c0 <fsm_mode_run+0x6f8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dd20      	ble.n	80007c2 <fsm_mode_run+0x4fa>
 8000780:	4b90      	ldr	r3, [pc, #576]	; (80009c4 <fsm_mode_run+0x6fc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db1c      	blt.n	80007c2 <fsm_mode_run+0x4fa>
				led34--;
 8000788:	4b8d      	ldr	r3, [pc, #564]	; (80009c0 <fsm_mode_run+0x6f8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a8c      	ldr	r2, [pc, #560]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000790:	6013      	str	r3, [r2, #0]
				if (led34 == 0 && led12 != 0){
 8000792:	4b8b      	ldr	r3, [pc, #556]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10b      	bne.n	80007b2 <fsm_mode_run+0x4ea>
 800079a:	4b8a      	ldr	r3, [pc, #552]	; (80009c4 <fsm_mode_run+0x6fc>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d007      	beq.n	80007b2 <fsm_mode_run+0x4ea>
					led34 = 59;
 80007a2:	4b87      	ldr	r3, [pc, #540]	; (80009c0 <fsm_mode_run+0x6f8>)
 80007a4:	223b      	movs	r2, #59	; 0x3b
 80007a6:	601a      	str	r2, [r3, #0]
					led12--;
 80007a8:	4b86      	ldr	r3, [pc, #536]	; (80009c4 <fsm_mode_run+0x6fc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	4a85      	ldr	r2, [pc, #532]	; (80009c4 <fsm_mode_run+0x6fc>)
 80007b0:	6013      	str	r3, [r2, #0]
				}
				updateLedBuffer(led12, led34);
 80007b2:	4b84      	ldr	r3, [pc, #528]	; (80009c4 <fsm_mode_run+0x6fc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a82      	ldr	r2, [pc, #520]	; (80009c0 <fsm_mode_run+0x6f8>)
 80007b8:	6812      	ldr	r2, [r2, #0]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fd41 	bl	8001244 <updateLedBuffer>
			}
			setTimer6(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f001 fad5 	bl	8001d74 <setTimer6>
		}

		if (isButtonflag(butM) == 1){
 80007ca:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <fsm_mode_run+0x700>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f996 	bl	8000b00 <isButtonflag>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d102      	bne.n	80007e0 <fsm_mode_run+0x518>
			status_mode = MODE4;
 80007da:	4b7c      	ldr	r3, [pc, #496]	; (80009cc <fsm_mode_run+0x704>)
 80007dc:	2204      	movs	r2, #4
 80007de:	601a      	str	r2, [r3, #0]
		}


		if(isButtonflag(butS)==1){
 80007e0:	4b7b      	ldr	r3, [pc, #492]	; (80009d0 <fsm_mode_run+0x708>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f98b 	bl	8000b00 <isButtonflag>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	f040 816a 	bne.w	8000ac6 <fsm_mode_run+0x7fe>
			hourStopWatch = led12;
 80007f2:	4b74      	ldr	r3, [pc, #464]	; (80009c4 <fsm_mode_run+0x6fc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a77      	ldr	r2, [pc, #476]	; (80009d4 <fsm_mode_run+0x70c>)
 80007f8:	6013      	str	r3, [r2, #0]
			status_mode = MODIFY_HOUR_STOPWATCH;
 80007fa:	4b74      	ldr	r3, [pc, #464]	; (80009cc <fsm_mode_run+0x704>)
 80007fc:	2211      	movs	r2, #17
 80007fe:	601a      	str	r2, [r3, #0]
		}

		break;
 8000800:	e161      	b.n	8000ac6 <fsm_mode_run+0x7fe>

	case MODIFY_MINUTE_STOPWATCH:

		if (isButtonflag(butM) == 1){
 8000802:	4b71      	ldr	r3, [pc, #452]	; (80009c8 <fsm_mode_run+0x700>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f97a 	bl	8000b00 <isButtonflag>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d102      	bne.n	8000818 <fsm_mode_run+0x550>
			status_mode = MODE4;
 8000812:	4b6e      	ldr	r3, [pc, #440]	; (80009cc <fsm_mode_run+0x704>)
 8000814:	2204      	movs	r2, #4
 8000816:	601a      	str	r2, [r3, #0]
		}

		if (isButtonflag(butU) == 1){
 8000818:	4b6f      	ldr	r3, [pc, #444]	; (80009d8 <fsm_mode_run+0x710>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f96f 	bl	8000b00 <isButtonflag>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d113      	bne.n	8000850 <fsm_mode_run+0x588>
			led34++;
 8000828:	4b65      	ldr	r3, [pc, #404]	; (80009c0 <fsm_mode_run+0x6f8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a64      	ldr	r2, [pc, #400]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000830:	6013      	str	r3, [r2, #0]

			if (led34 > 59){
 8000832:	4b63      	ldr	r3, [pc, #396]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b3b      	cmp	r3, #59	; 0x3b
 8000838:	dd02      	ble.n	8000840 <fsm_mode_run+0x578>
				led34 = 0;
 800083a:	4b61      	ldr	r3, [pc, #388]	; (80009c0 <fsm_mode_run+0x6f8>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 8000840:	4b60      	ldr	r3, [pc, #384]	; (80009c4 <fsm_mode_run+0x6fc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a5e      	ldr	r2, [pc, #376]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000846:	6812      	ldr	r2, [r2, #0]
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fcfa 	bl	8001244 <updateLedBuffer>
		}

		if (isButtonflag(butD) == 1){
 8000850:	4b62      	ldr	r3, [pc, #392]	; (80009dc <fsm_mode_run+0x714>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f953 	bl	8000b00 <isButtonflag>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d113      	bne.n	8000888 <fsm_mode_run+0x5c0>
			led34--;
 8000860:	4b57      	ldr	r3, [pc, #348]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3b01      	subs	r3, #1
 8000866:	4a56      	ldr	r2, [pc, #344]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000868:	6013      	str	r3, [r2, #0]

			if (led34 < 0){
 800086a:	4b55      	ldr	r3, [pc, #340]	; (80009c0 <fsm_mode_run+0x6f8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	da02      	bge.n	8000878 <fsm_mode_run+0x5b0>
				led34 = 59;
 8000872:	4b53      	ldr	r3, [pc, #332]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000874:	223b      	movs	r2, #59	; 0x3b
 8000876:	601a      	str	r2, [r3, #0]
			}

			updateLedBuffer(led12, led34);
 8000878:	4b52      	ldr	r3, [pc, #328]	; (80009c4 <fsm_mode_run+0x6fc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a50      	ldr	r2, [pc, #320]	; (80009c0 <fsm_mode_run+0x6f8>)
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fcde 	bl	8001244 <updateLedBuffer>
		}

		if(isButtonflag(butS)==1){
 8000888:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <fsm_mode_run+0x708>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f937 	bl	8000b00 <isButtonflag>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	f040 8118 	bne.w	8000aca <fsm_mode_run+0x802>
			minuteStopWatch = led34;
 800089a:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <fsm_mode_run+0x6f8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a50      	ldr	r2, [pc, #320]	; (80009e0 <fsm_mode_run+0x718>)
 80008a0:	6013      	str	r3, [r2, #0]
			status_mode = MODE3;
 80008a2:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <fsm_mode_run+0x704>)
 80008a4:	2203      	movs	r2, #3
 80008a6:	601a      	str	r2, [r3, #0]
			led12 = hourStopWatch;
 80008a8:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <fsm_mode_run+0x70c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a45      	ldr	r2, [pc, #276]	; (80009c4 <fsm_mode_run+0x6fc>)
 80008ae:	6013      	str	r3, [r2, #0]
//			led34 = minuteAlarm;
			updateLedBuffer(led12, led34);
 80008b0:	4b44      	ldr	r3, [pc, #272]	; (80009c4 <fsm_mode_run+0x6fc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a42      	ldr	r2, [pc, #264]	; (80009c0 <fsm_mode_run+0x6f8>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fcc2 	bl	8001244 <updateLedBuffer>
		}
		break;
 80008c0:	e103      	b.n	8000aca <fsm_mode_run+0x802>

	case MODE4: // Modify Time
		if (isButtonflag(butM) == 1){
 80008c2:	4b41      	ldr	r3, [pc, #260]	; (80009c8 <fsm_mode_run+0x700>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f91a 	bl	8000b00 <isButtonflag>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d112      	bne.n	80008f8 <fsm_mode_run+0x630>
//			clearTimer1();
//			clearTimer2();
//			clearTimer3();
			status_mode = MODE1;
 80008d2:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <fsm_mode_run+0x704>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
			led12 = hour;
 80008d8:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <fsm_mode_run+0x71c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a39      	ldr	r2, [pc, #228]	; (80009c4 <fsm_mode_run+0x6fc>)
 80008de:	6013      	str	r3, [r2, #0]
			led34 = minute;
 80008e0:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <fsm_mode_run+0x720>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a36      	ldr	r2, [pc, #216]	; (80009c0 <fsm_mode_run+0x6f8>)
 80008e6:	6013      	str	r3, [r2, #0]
			updateLedBuffer(led12, led34);
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <fsm_mode_run+0x6fc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <fsm_mode_run+0x6f8>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fca6 	bl	8001244 <updateLedBuffer>
			//setTimer3(1000);
		}
		if(isButtonflag(butS)==1){
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <fsm_mode_run+0x708>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f8ff 	bl	8000b00 <isButtonflag>
 8000902:	4603      	mov	r3, r0
 8000904:	2b01      	cmp	r3, #1
 8000906:	f040 80e2 	bne.w	8000ace <fsm_mode_run+0x806>
			status_mode = MODIFY_HOUR;
 800090a:	4b30      	ldr	r3, [pc, #192]	; (80009cc <fsm_mode_run+0x704>)
 800090c:	220d      	movs	r2, #13
 800090e:	601a      	str	r2, [r3, #0]
//			if (led34 > 99){
//				led34 = 0;
//			}
//		}

		break;
 8000910:	e0dd      	b.n	8000ace <fsm_mode_run+0x806>
//		  if (timer3_flag == 1){
//			  HAL_GPIO_TogglePin(LED_GRE_GPIO_Port, LED_GRE_Pin);
//			  setTimer3(500);
//		  }

		if (isButtonflag(butM) == 1){
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <fsm_mode_run+0x700>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f8f2 	bl	8000b00 <isButtonflag>
 800091c:	4603      	mov	r3, r0
 800091e:	2b01      	cmp	r3, #1
 8000920:	d102      	bne.n	8000928 <fsm_mode_run+0x660>
			status_mode = MODE1;
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <fsm_mode_run+0x704>)
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
		}

		if (isButtonflag(butU) == 1){
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <fsm_mode_run+0x710>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f8e7 	bl	8000b00 <isButtonflag>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d113      	bne.n	8000960 <fsm_mode_run+0x698>
			led12++;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <fsm_mode_run+0x6fc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <fsm_mode_run+0x6fc>)
 8000940:	6013      	str	r3, [r2, #0]

			if (led12 > 23){
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <fsm_mode_run+0x6fc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b17      	cmp	r3, #23
 8000948:	dd02      	ble.n	8000950 <fsm_mode_run+0x688>
				led12 = 0;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <fsm_mode_run+0x6fc>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <fsm_mode_run+0x6fc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1a      	ldr	r2, [pc, #104]	; (80009c0 <fsm_mode_run+0x6f8>)
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fc72 	bl	8001244 <updateLedBuffer>
		}

		if (isButtonflag(butD) == 1){
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <fsm_mode_run+0x714>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f8cb 	bl	8000b00 <isButtonflag>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d113      	bne.n	8000998 <fsm_mode_run+0x6d0>
			led12--;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <fsm_mode_run+0x6fc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3b01      	subs	r3, #1
 8000976:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <fsm_mode_run+0x6fc>)
 8000978:	6013      	str	r3, [r2, #0]

			if (led12 < 0){
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <fsm_mode_run+0x6fc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	da02      	bge.n	8000988 <fsm_mode_run+0x6c0>
				led12 = 23;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <fsm_mode_run+0x6fc>)
 8000984:	2217      	movs	r2, #23
 8000986:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <fsm_mode_run+0x6fc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <fsm_mode_run+0x6f8>)
 800098e:	6812      	ldr	r2, [r2, #0]
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fc56 	bl	8001244 <updateLedBuffer>
		}

		if(isButtonflag(butS)==1){
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <fsm_mode_run+0x708>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f8af 	bl	8000b00 <isButtonflag>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	f040 8094 	bne.w	8000ad2 <fsm_mode_run+0x80a>
			hour = led12;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <fsm_mode_run+0x6fc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <fsm_mode_run+0x71c>)
 80009b0:	6013      	str	r3, [r2, #0]
			status_mode = MODIFY_MINUTE;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <fsm_mode_run+0x704>)
 80009b4:	220c      	movs	r2, #12
 80009b6:	601a      	str	r2, [r3, #0]
		}

		break;
 80009b8:	e08b      	b.n	8000ad2 <fsm_mode_run+0x80a>
 80009ba:	bf00      	nop
 80009bc:	200004c4 	.word	0x200004c4
 80009c0:	20000060 	.word	0x20000060
 80009c4:	2000005c 	.word	0x2000005c
 80009c8:	20000044 	.word	0x20000044
 80009cc:	20000038 	.word	0x20000038
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000054 	.word	0x20000054
 80009d8:	20000004 	.word	0x20000004
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000058 	.word	0x20000058
 80009e4:	2000006c 	.word	0x2000006c
 80009e8:	20000068 	.word	0x20000068

	case MODIFY_MINUTE:

		if (isButtonflag(butM) == 1){
 80009ec:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <fsm_mode_run+0x814>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f885 	bl	8000b00 <isButtonflag>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d102      	bne.n	8000a02 <fsm_mode_run+0x73a>
			status_mode = MODE1;
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <fsm_mode_run+0x818>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
		}

		if (isButtonflag(butU) == 1){
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <fsm_mode_run+0x81c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f87a 	bl	8000b00 <isButtonflag>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d113      	bne.n	8000a3a <fsm_mode_run+0x772>
			led34++;
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a33      	ldr	r2, [pc, #204]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a1a:	6013      	str	r3, [r2, #0]

			if (led34 > 59){
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b3b      	cmp	r3, #59	; 0x3b
 8000a22:	dd02      	ble.n	8000a2a <fsm_mode_run+0x762>
				led34 = 0;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
			}
			updateLedBuffer(led12, led34);
 8000a2a:	4b30      	ldr	r3, [pc, #192]	; (8000aec <fsm_mode_run+0x824>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fc05 	bl	8001244 <updateLedBuffer>
		}

		if (isButtonflag(butD) == 1){
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <fsm_mode_run+0x828>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f85e 	bl	8000b00 <isButtonflag>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d113      	bne.n	8000a72 <fsm_mode_run+0x7aa>
			led34--;
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a52:	6013      	str	r3, [r2, #0]

			if (led34 < 0){
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	da02      	bge.n	8000a62 <fsm_mode_run+0x79a>
				led34 = 59;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a5e:	223b      	movs	r2, #59	; 0x3b
 8000a60:	601a      	str	r2, [r3, #0]
			}

			updateLedBuffer(led12, led34);
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <fsm_mode_run+0x824>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a68:	6812      	ldr	r2, [r2, #0]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fbe9 	bl	8001244 <updateLedBuffer>
		}

		if(isButtonflag(butS)==1){
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <fsm_mode_run+0x82c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f842 	bl	8000b00 <isButtonflag>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d129      	bne.n	8000ad6 <fsm_mode_run+0x80e>
			minute = led34;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <fsm_mode_run+0x830>)
 8000a88:	6013      	str	r3, [r2, #0]
			status_mode = MODE4;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <fsm_mode_run+0x818>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	601a      	str	r2, [r3, #0]
			led12 = hour;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <fsm_mode_run+0x834>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a15      	ldr	r2, [pc, #84]	; (8000aec <fsm_mode_run+0x824>)
 8000a96:	6013      	str	r3, [r2, #0]
//			led34 = minuteAlarm;
			updateLedBuffer(led12, led34);
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <fsm_mode_run+0x824>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <fsm_mode_run+0x820>)
 8000a9e:	6812      	ldr	r2, [r2, #0]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fbce 	bl	8001244 <updateLedBuffer>
		}
		break;
 8000aa8:	e015      	b.n	8000ad6 <fsm_mode_run+0x80e>
	default:
		break;
 8000aaa:	bf00      	nop
 8000aac:	e014      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000aae:	bf00      	nop
 8000ab0:	e012      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000ab2:	bf00      	nop
 8000ab4:	e010      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000ab6:	bf00      	nop
 8000ab8:	e00e      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000aba:	bf00      	nop
 8000abc:	e00c      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000abe:	bf00      	nop
 8000ac0:	e00a      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000ac2:	bf00      	nop
 8000ac4:	e008      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000ac6:	bf00      	nop
 8000ac8:	e006      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000aca:	bf00      	nop
 8000acc:	e004      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000ace:	bf00      	nop
 8000ad0:	e002      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000ad2:	bf00      	nop
 8000ad4:	e000      	b.n	8000ad8 <fsm_mode_run+0x810>
		break;
 8000ad6:	bf00      	nop
	}


}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000044 	.word	0x20000044
 8000ae0:	20000038 	.word	0x20000038
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	20000060 	.word	0x20000060
 8000aec:	2000005c 	.word	0x2000005c
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000068 	.word	0x20000068
 8000afc:	2000006c 	.word	0x2000006c

08000b00 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <isButtonflag+0x30>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d106      	bne.n	8000b22 <isButtonflag+0x22>
		flagForButton[index] = 0;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <isButtonflag+0x30>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <isButtonflag+0x24>
	}
	return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000084 	.word	0x20000084

08000b34 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d901      	bls.n	8000b48 <is_button_pressed+0x14>
 8000b44:	2300      	movs	r3, #0
 8000b46:	e007      	b.n	8000b58 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <is_button_pressed+0x30>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf0c      	ite	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	2300      	movne	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000070 	.word	0x20000070

08000b68 <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d901      	bls.n	8000b7c <is_button_pressed_3s+0x14>
 8000b78:	23ff      	movs	r3, #255	; 0xff
 8000b7a:	e007      	b.n	8000b8c <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <is_button_pressed_3s+0x30>)
 8000b80:	5cd3      	ldrb	r3, [r2, r3]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	bf0c      	ite	eq
 8000b86:	2301      	moveq	r3, #1
 8000b88:	2300      	movne	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000080 	.word	0x20000080

08000b9c <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
int counter10S = 0;
void fsm_for_input_processing(uint8_t index ){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a65      	ldr	r2, [pc, #404]	; (8000d40 <fsm_for_input_processing+0x1a4>)
 8000baa:	5cd3      	ldrb	r3, [r2, r3]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	f000 808e 	beq.w	8000cce <fsm_for_input_processing+0x132>
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	f300 80c0 	bgt.w	8000d38 <fsm_for_input_processing+0x19c>
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <fsm_for_input_processing+0x26>
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d03c      	beq.n	8000c3a <fsm_for_input_processing+0x9e>
					}
				}

			break ;
	}
}
 8000bc0:	e0ba      	b.n	8000d38 <fsm_for_input_processing+0x19c>
			if( is_button_pressed(index)){
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ffb5 	bl	8000b34 <is_button_pressed>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d011      	beq.n	8000bf4 <fsm_for_input_processing+0x58>
				buttonState[index] = BUTTON_PRESSED ;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a5b      	ldr	r2, [pc, #364]	; (8000d40 <fsm_for_input_processing+0x1a4>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4a5a      	ldr	r2, [pc, #360]	; (8000d44 <fsm_for_input_processing+0x1a8>)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <fsm_for_input_processing+0x1ac>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4a57      	ldr	r2, [pc, #348]	; (8000d4c <fsm_for_input_processing+0x1b0>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	54d1      	strb	r1, [r2, r3]
			break ;
 8000bf2:	e09e      	b.n	8000d32 <fsm_for_input_processing+0x196>
				if(timer4_flag==1 && status_mode != MODE1 && status_mode != ON_STOPWATCH){
 8000bf4:	4b56      	ldr	r3, [pc, #344]	; (8000d50 <fsm_for_input_processing+0x1b4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	f040 809a 	bne.w	8000d32 <fsm_for_input_processing+0x196>
 8000bfe:	4b55      	ldr	r3, [pc, #340]	; (8000d54 <fsm_for_input_processing+0x1b8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	f000 8095 	beq.w	8000d32 <fsm_for_input_processing+0x196>
 8000c08:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <fsm_for_input_processing+0x1b8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b08      	cmp	r3, #8
 8000c0e:	f000 8090 	beq.w	8000d32 <fsm_for_input_processing+0x196>
					counter10S++;
 8000c12:	4b51      	ldr	r3, [pc, #324]	; (8000d58 <fsm_for_input_processing+0x1bc>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a4f      	ldr	r2, [pc, #316]	; (8000d58 <fsm_for_input_processing+0x1bc>)
 8000c1a:	6013      	str	r3, [r2, #0]
					if(counter10S >= 10){
 8000c1c:	4b4e      	ldr	r3, [pc, #312]	; (8000d58 <fsm_for_input_processing+0x1bc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b09      	cmp	r3, #9
 8000c22:	dd05      	ble.n	8000c30 <fsm_for_input_processing+0x94>
						counter10S = 0;
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <fsm_for_input_processing+0x1bc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
						status_mode = INIT;
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <fsm_for_input_processing+0x1b8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
					setTimer4(1000);
 8000c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c34:	f001 f86a 	bl	8001d0c <setTimer4>
			break ;
 8000c38:	e07b      	b.n	8000d32 <fsm_for_input_processing+0x196>
			counter10S = 0;
 8000c3a:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <fsm_for_input_processing+0x1bc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
			if (!is_button_pressed(index)){
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff76 	bl	8000b34 <is_button_pressed>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10d      	bne.n	8000c6a <fsm_for_input_processing+0xce>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4a3b      	ldr	r2, [pc, #236]	; (8000d40 <fsm_for_input_processing+0x1a4>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <fsm_for_input_processing+0x1b0>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4a38      	ldr	r2, [pc, #224]	; (8000d44 <fsm_for_input_processing+0x1a8>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000c68:	e065      	b.n	8000d36 <fsm_for_input_processing+0x19a>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4a35      	ldr	r2, [pc, #212]	; (8000d44 <fsm_for_input_processing+0x1a8>)
 8000c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c72:	2b63      	cmp	r3, #99	; 0x63
 8000c74:	d809      	bhi.n	8000c8a <fsm_for_input_processing+0xee>
						counterForButtonPress1s[index]++;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <fsm_for_input_processing+0x1a8>)
 8000c7a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c7e:	3201      	adds	r2, #1
 8000c80:	b291      	uxth	r1, r2
 8000c82:	4a30      	ldr	r2, [pc, #192]	; (8000d44 <fsm_for_input_processing+0x1a8>)
 8000c84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c88:	e011      	b.n	8000cae <fsm_for_input_processing+0x112>
					flagForButtonPress1s[index] = 1;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a2e      	ldr	r2, [pc, #184]	; (8000d48 <fsm_for_input_processing+0x1ac>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <fsm_for_input_processing+0x1b0>)
 8000c96:	2101      	movs	r1, #1
 8000c98:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <fsm_for_input_processing+0x1c0>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <fsm_for_input_processing+0x1a8>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff59 	bl	8000b68 <is_button_pressed_3s>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d03c      	beq.n	8000d36 <fsm_for_input_processing+0x19a>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <fsm_for_input_processing+0x1a4>)
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <fsm_for_input_processing+0x1ac>)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	54d1      	strb	r1, [r2, r3]
			break ;
 8000ccc:	e033      	b.n	8000d36 <fsm_for_input_processing+0x19a>
			counter10S = 0;
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <fsm_for_input_processing+0x1bc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
			if (!is_button_pressed(index)){
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff2c 	bl	8000b34 <is_button_pressed>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10d      	bne.n	8000cfe <fsm_for_input_processing+0x162>
				buttonState[index] = BUTTON_RELEASED;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <fsm_for_input_processing+0x1a4>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <fsm_for_input_processing+0x1b0>)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <fsm_for_input_processing+0x1c0>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000cfc:	e01c      	b.n	8000d38 <fsm_for_input_processing+0x19c>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <fsm_for_input_processing+0x1c0>)
 8000d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d06:	2b13      	cmp	r3, #19
 8000d08:	d809      	bhi.n	8000d1e <fsm_for_input_processing+0x182>
							counterForButtonAfterPress1s[index]++;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <fsm_for_input_processing+0x1c0>)
 8000d0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d12:	3201      	adds	r2, #1
 8000d14:	b291      	uxth	r1, r2
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <fsm_for_input_processing+0x1c0>)
 8000d18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000d1c:	e00c      	b.n	8000d38 <fsm_for_input_processing+0x19c>
						flagForButton[index] = 1;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <fsm_for_input_processing+0x1b0>)
 8000d22:	2101      	movs	r1, #1
 8000d24:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <fsm_for_input_processing+0x1c0>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000d30:	e002      	b.n	8000d38 <fsm_for_input_processing+0x19c>
			break ;
 8000d32:	bf00      	nop
 8000d34:	e000      	b.n	8000d38 <fsm_for_input_processing+0x19c>
			break ;
 8000d36:	bf00      	nop
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000098 	.word	0x20000098
 8000d44:	20000088 	.word	0x20000088
 8000d48:	20000080 	.word	0x20000080
 8000d4c:	20000084 	.word	0x20000084
 8000d50:	200004bc 	.word	0x200004bc
 8000d54:	20000038 	.word	0x20000038
 8000d58:	2000009c 	.word	0x2000009c
 8000d5c:	20000090 	.word	0x20000090

08000d60 <button_reading>:




void button_reading(void){
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000d66:	2300      	movs	r3, #0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	e05f      	b.n	8000e2c <button_reading+0xcc>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000d6c:	79fa      	ldrb	r2, [r7, #7]
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4932      	ldr	r1, [pc, #200]	; (8000e3c <button_reading+0xdc>)
 8000d72:	5c89      	ldrb	r1, [r1, r2]
 8000d74:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <button_reading+0xe0>)
 8000d76:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000d78:	79fa      	ldrb	r2, [r7, #7]
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4931      	ldr	r1, [pc, #196]	; (8000e44 <button_reading+0xe4>)
 8000d7e:	5c89      	ldrb	r1, [r1, r2]
 8000d80:	4a2e      	ldr	r2, [pc, #184]	; (8000e3c <button_reading+0xdc>)
 8000d82:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d832      	bhi.n	8000df0 <button_reading+0x90>
 8000d8a:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <button_reading+0x30>)
 8000d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d90:	08000da1 	.word	0x08000da1
 8000d94:	08000db5 	.word	0x08000db5
 8000d98:	08000dc9 	.word	0x08000dc9
 8000d9c:	08000ddd 	.word	0x08000ddd
		  case 0: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8000da0:	79fc      	ldrb	r4, [r7, #7]
 8000da2:	2120      	movs	r1, #32
 8000da4:	4828      	ldr	r0, [pc, #160]	; (8000e48 <button_reading+0xe8>)
 8000da6:	f001 fcdf 	bl	8002768 <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <button_reading+0xe4>)
 8000db0:	551a      	strb	r2, [r3, r4]

			  break;
 8000db2:	e01e      	b.n	8000df2 <button_reading+0x92>
		  case 1: // read data from Button 2
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 8000db4:	79fc      	ldrb	r4, [r7, #7]
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4823      	ldr	r0, [pc, #140]	; (8000e48 <button_reading+0xe8>)
 8000dba:	f001 fcd5 	bl	8002768 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <button_reading+0xe4>)
 8000dc4:	551a      	strb	r2, [r3, r4]
			  break;
 8000dc6:	e014      	b.n	8000df2 <button_reading+0x92>
		  case 2: // read data from Button 4
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin);
 8000dc8:	79fc      	ldrb	r4, [r7, #7]
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	481f      	ldr	r0, [pc, #124]	; (8000e4c <button_reading+0xec>)
 8000dce:	f001 fccb 	bl	8002768 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <button_reading+0xe4>)
 8000dd8:	551a      	strb	r2, [r3, r4]
			  break;
 8000dda:	e00a      	b.n	8000df2 <button_reading+0x92>
		  case 3: // read data from Button 1

			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 8000ddc:	79fc      	ldrb	r4, [r7, #7]
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	481b      	ldr	r0, [pc, #108]	; (8000e50 <button_reading+0xf0>)
 8000de2:	f001 fcc1 	bl	8002768 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <button_reading+0xe4>)
 8000dec:	551a      	strb	r2, [r3, r4]
			  break;
 8000dee:	e000      	b.n	8000df2 <button_reading+0x92>
		  default:
			  break;
 8000df0:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <button_reading+0xe4>)
 8000df6:	5cd2      	ldrb	r2, [r2, r3]
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4910      	ldr	r1, [pc, #64]	; (8000e3c <button_reading+0xdc>)
 8000dfc:	5ccb      	ldrb	r3, [r1, r3]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d111      	bne.n	8000e26 <button_reading+0xc6>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <button_reading+0xdc>)
 8000e06:	5cd2      	ldrb	r2, [r2, r3]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	490d      	ldr	r1, [pc, #52]	; (8000e40 <button_reading+0xe0>)
 8000e0c:	5ccb      	ldrb	r3, [r1, r3]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d109      	bne.n	8000e26 <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	490a      	ldr	r1, [pc, #40]	; (8000e40 <button_reading+0xe0>)
 8000e18:	5c89      	ldrb	r1, [r1, r2]
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <button_reading+0xf4>)
 8000e1c:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff febb 	bl	8000b9c <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d99c      	bls.n	8000d6c <button_reading+0xc>
		  }

	}
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	20000078 	.word	0x20000078
 8000e40:	2000007c 	.word	0x2000007c
 8000e44:	20000074 	.word	0x20000074
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40011000 	.word	0x40011000
 8000e54:	20000070 	.word	0x20000070

08000e58 <display7SEG>:
#include "led_display.h"


void display7SEG(int num){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	if (num >=10) num=num%10;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b09      	cmp	r3, #9
 8000e64:	dd0c      	ble.n	8000e80 <display7SEG+0x28>
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4bc7      	ldr	r3, [pc, #796]	; (8001188 <display7SEG+0x330>)
 8000e6a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e6e:	1099      	asrs	r1, r3, #2
 8000e70:	17d3      	asrs	r3, r2, #31
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	607b      	str	r3, [r7, #4]
	switch (num) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b09      	cmp	r3, #9
 8000e84:	f200 81ae 	bhi.w	80011e4 <display7SEG+0x38c>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <display7SEG+0x38>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000eb9 	.word	0x08000eb9
 8000e94:	08000f09 	.word	0x08000f09
 8000e98:	08000f59 	.word	0x08000f59
 8000e9c:	08000fa9 	.word	0x08000fa9
 8000ea0:	08000ff9 	.word	0x08000ff9
 8000ea4:	08001049 	.word	0x08001049
 8000ea8:	08001099 	.word	0x08001099
 8000eac:	080010e9 	.word	0x080010e9
 8000eb0:	08001139 	.word	0x08001139
 8000eb4:	08001195 	.word	0x08001195
	case 0:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebe:	48b3      	ldr	r0, [pc, #716]	; (800118c <display7SEG+0x334>)
 8000ec0:	f001 fc69 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	48b1      	ldr	r0, [pc, #708]	; (8001190 <display7SEG+0x338>)
 8000eca:	f001 fc64 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	48af      	ldr	r0, [pc, #700]	; (8001190 <display7SEG+0x338>)
 8000ed4:	f001 fc5f 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	48ac      	ldr	r0, [pc, #688]	; (8001190 <display7SEG+0x338>)
 8000ede:	f001 fc5a 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	48a9      	ldr	r0, [pc, #676]	; (8001190 <display7SEG+0x338>)
 8000eea:	f001 fc54 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef4:	48a5      	ldr	r0, [pc, #660]	; (800118c <display7SEG+0x334>)
 8000ef6:	f001 fc4e 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f00:	48a2      	ldr	r0, [pc, #648]	; (800118c <display7SEG+0x334>)
 8000f02:	f001 fc48 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8000f06:	e195      	b.n	8001234 <display7SEG+0x3dc>
	case 1:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0e:	489f      	ldr	r0, [pc, #636]	; (800118c <display7SEG+0x334>)
 8000f10:	f001 fc41 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2108      	movs	r1, #8
 8000f18:	489d      	ldr	r0, [pc, #628]	; (8001190 <display7SEG+0x338>)
 8000f1a:	f001 fc3c 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2120      	movs	r1, #32
 8000f22:	489b      	ldr	r0, [pc, #620]	; (8001190 <display7SEG+0x338>)
 8000f24:	f001 fc37 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	4898      	ldr	r0, [pc, #608]	; (8001190 <display7SEG+0x338>)
 8000f2e:	f001 fc32 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f38:	4895      	ldr	r0, [pc, #596]	; (8001190 <display7SEG+0x338>)
 8000f3a:	f001 fc2c 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4891      	ldr	r0, [pc, #580]	; (800118c <display7SEG+0x334>)
 8000f46:	f001 fc26 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f50:	488e      	ldr	r0, [pc, #568]	; (800118c <display7SEG+0x334>)
 8000f52:	f001 fc20 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8000f56:	e16d      	b.n	8001234 <display7SEG+0x3dc>
	case 2:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5e:	488b      	ldr	r0, [pc, #556]	; (800118c <display7SEG+0x334>)
 8000f60:	f001 fc19 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	4889      	ldr	r0, [pc, #548]	; (8001190 <display7SEG+0x338>)
 8000f6a:	f001 fc14 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2120      	movs	r1, #32
 8000f72:	4887      	ldr	r0, [pc, #540]	; (8001190 <display7SEG+0x338>)
 8000f74:	f001 fc0f 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4884      	ldr	r0, [pc, #528]	; (8001190 <display7SEG+0x338>)
 8000f7e:	f001 fc0a 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	4881      	ldr	r0, [pc, #516]	; (8001190 <display7SEG+0x338>)
 8000f8a:	f001 fc04 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	487d      	ldr	r0, [pc, #500]	; (800118c <display7SEG+0x334>)
 8000f96:	f001 fbfe 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa0:	487a      	ldr	r0, [pc, #488]	; (800118c <display7SEG+0x334>)
 8000fa2:	f001 fbf8 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8000fa6:	e145      	b.n	8001234 <display7SEG+0x3dc>
	case 3:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fae:	4877      	ldr	r0, [pc, #476]	; (800118c <display7SEG+0x334>)
 8000fb0:	f001 fbf1 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	4875      	ldr	r0, [pc, #468]	; (8001190 <display7SEG+0x338>)
 8000fba:	f001 fbec 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4873      	ldr	r0, [pc, #460]	; (8001190 <display7SEG+0x338>)
 8000fc4:	f001 fbe7 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4870      	ldr	r0, [pc, #448]	; (8001190 <display7SEG+0x338>)
 8000fce:	f001 fbe2 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd8:	486d      	ldr	r0, [pc, #436]	; (8001190 <display7SEG+0x338>)
 8000fda:	f001 fbdc 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe4:	4869      	ldr	r0, [pc, #420]	; (800118c <display7SEG+0x334>)
 8000fe6:	f001 fbd6 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff0:	4866      	ldr	r0, [pc, #408]	; (800118c <display7SEG+0x334>)
 8000ff2:	f001 fbd0 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8000ff6:	e11d      	b.n	8001234 <display7SEG+0x3dc>
	case 4:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffe:	4863      	ldr	r0, [pc, #396]	; (800118c <display7SEG+0x334>)
 8001000:	f001 fbc9 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2108      	movs	r1, #8
 8001008:	4861      	ldr	r0, [pc, #388]	; (8001190 <display7SEG+0x338>)
 800100a:	f001 fbc4 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2120      	movs	r1, #32
 8001012:	485f      	ldr	r0, [pc, #380]	; (8001190 <display7SEG+0x338>)
 8001014:	f001 fbbf 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2110      	movs	r1, #16
 800101c:	485c      	ldr	r0, [pc, #368]	; (8001190 <display7SEG+0x338>)
 800101e:	f001 fbba 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4859      	ldr	r0, [pc, #356]	; (8001190 <display7SEG+0x338>)
 800102a:	f001 fbb4 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	4855      	ldr	r0, [pc, #340]	; (800118c <display7SEG+0x334>)
 8001036:	f001 fbae 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001040:	4852      	ldr	r0, [pc, #328]	; (800118c <display7SEG+0x334>)
 8001042:	f001 fba8 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8001046:	e0f5      	b.n	8001234 <display7SEG+0x3dc>
	case 5:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104e:	484f      	ldr	r0, [pc, #316]	; (800118c <display7SEG+0x334>)
 8001050:	f001 fba1 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2108      	movs	r1, #8
 8001058:	484d      	ldr	r0, [pc, #308]	; (8001190 <display7SEG+0x338>)
 800105a:	f001 fb9c 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2120      	movs	r1, #32
 8001062:	484b      	ldr	r0, [pc, #300]	; (8001190 <display7SEG+0x338>)
 8001064:	f001 fb97 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	2110      	movs	r1, #16
 800106c:	4848      	ldr	r0, [pc, #288]	; (8001190 <display7SEG+0x338>)
 800106e:	f001 fb92 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001078:	4845      	ldr	r0, [pc, #276]	; (8001190 <display7SEG+0x338>)
 800107a:	f001 fb8c 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	4841      	ldr	r0, [pc, #260]	; (800118c <display7SEG+0x334>)
 8001086:	f001 fb86 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001090:	483e      	ldr	r0, [pc, #248]	; (800118c <display7SEG+0x334>)
 8001092:	f001 fb80 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8001096:	e0cd      	b.n	8001234 <display7SEG+0x3dc>
	case 6:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109e:	483b      	ldr	r0, [pc, #236]	; (800118c <display7SEG+0x334>)
 80010a0:	f001 fb79 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2108      	movs	r1, #8
 80010a8:	4839      	ldr	r0, [pc, #228]	; (8001190 <display7SEG+0x338>)
 80010aa:	f001 fb74 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2120      	movs	r1, #32
 80010b2:	4837      	ldr	r0, [pc, #220]	; (8001190 <display7SEG+0x338>)
 80010b4:	f001 fb6f 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2110      	movs	r1, #16
 80010bc:	4834      	ldr	r0, [pc, #208]	; (8001190 <display7SEG+0x338>)
 80010be:	f001 fb6a 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c8:	4831      	ldr	r0, [pc, #196]	; (8001190 <display7SEG+0x338>)
 80010ca:	f001 fb64 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d4:	482d      	ldr	r0, [pc, #180]	; (800118c <display7SEG+0x334>)
 80010d6:	f001 fb5e 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e0:	482a      	ldr	r0, [pc, #168]	; (800118c <display7SEG+0x334>)
 80010e2:	f001 fb58 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 80010e6:	e0a5      	b.n	8001234 <display7SEG+0x3dc>
	case 7:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ee:	4827      	ldr	r0, [pc, #156]	; (800118c <display7SEG+0x334>)
 80010f0:	f001 fb51 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2108      	movs	r1, #8
 80010f8:	4825      	ldr	r0, [pc, #148]	; (8001190 <display7SEG+0x338>)
 80010fa:	f001 fb4c 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2120      	movs	r1, #32
 8001102:	4823      	ldr	r0, [pc, #140]	; (8001190 <display7SEG+0x338>)
 8001104:	f001 fb47 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	4820      	ldr	r0, [pc, #128]	; (8001190 <display7SEG+0x338>)
 800110e:	f001 fb42 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001118:	481d      	ldr	r0, [pc, #116]	; (8001190 <display7SEG+0x338>)
 800111a:	f001 fb3c 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <display7SEG+0x334>)
 8001126:	f001 fb36 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <display7SEG+0x334>)
 8001132:	f001 fb30 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8001136:	e07d      	b.n	8001234 <display7SEG+0x3dc>
	case 8:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113e:	4813      	ldr	r0, [pc, #76]	; (800118c <display7SEG+0x334>)
 8001140:	f001 fb29 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2108      	movs	r1, #8
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <display7SEG+0x338>)
 800114a:	f001 fb24 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2120      	movs	r1, #32
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <display7SEG+0x338>)
 8001154:	f001 fb1f 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2110      	movs	r1, #16
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <display7SEG+0x338>)
 800115e:	f001 fb1a 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <display7SEG+0x338>)
 800116a:	f001 fb14 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <display7SEG+0x334>)
 8001176:	f001 fb0e 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <display7SEG+0x334>)
 8001182:	f001 fb08 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8001186:	e055      	b.n	8001234 <display7SEG+0x3dc>
 8001188:	66666667 	.word	0x66666667
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00
	case 9:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	4828      	ldr	r0, [pc, #160]	; (800123c <display7SEG+0x3e4>)
 800119c:	f001 fafb 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2108      	movs	r1, #8
 80011a4:	4826      	ldr	r0, [pc, #152]	; (8001240 <display7SEG+0x3e8>)
 80011a6:	f001 faf6 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2120      	movs	r1, #32
 80011ae:	4824      	ldr	r0, [pc, #144]	; (8001240 <display7SEG+0x3e8>)
 80011b0:	f001 faf1 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2110      	movs	r1, #16
 80011b8:	4821      	ldr	r0, [pc, #132]	; (8001240 <display7SEG+0x3e8>)
 80011ba:	f001 faec 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	481e      	ldr	r0, [pc, #120]	; (8001240 <display7SEG+0x3e8>)
 80011c6:	f001 fae6 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	481a      	ldr	r0, [pc, #104]	; (800123c <display7SEG+0x3e4>)
 80011d2:	f001 fae0 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <display7SEG+0x3e4>)
 80011de:	f001 fada 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 80011e2:	e027      	b.n	8001234 <display7SEG+0x3dc>
	default :
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <display7SEG+0x3e4>)
 80011ec:	f001 fad3 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2108      	movs	r1, #8
 80011f4:	4812      	ldr	r0, [pc, #72]	; (8001240 <display7SEG+0x3e8>)
 80011f6:	f001 face 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2120      	movs	r1, #32
 80011fe:	4810      	ldr	r0, [pc, #64]	; (8001240 <display7SEG+0x3e8>)
 8001200:	f001 fac9 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <display7SEG+0x3e8>)
 800120a:	f001 fac4 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <display7SEG+0x3e8>)
 8001216:	f001 fabe 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <display7SEG+0x3e4>)
 8001222:	f001 fab8 	bl	8002796 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <display7SEG+0x3e4>)
 800122e:	f001 fab2 	bl	8002796 <HAL_GPIO_WritePin>
		break;
 8001232:	bf00      	nop
	}
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00

08001244 <updateLedBuffer>:
		default :
			break;
    }
}

void updateLedBuffer(int led1_2,int led3_4){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = led1_2 / 10;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <updateLedBuffer+0x70>)
 8001252:	fb82 1203 	smull	r1, r2, r2, r3
 8001256:	1092      	asrs	r2, r2, #2
 8001258:	17db      	asrs	r3, r3, #31
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <updateLedBuffer+0x74>)
 800125e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led1_2 % 10;
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <updateLedBuffer+0x70>)
 8001264:	fb83 2301 	smull	r2, r3, r3, r1
 8001268:	109a      	asrs	r2, r3, #2
 800126a:	17cb      	asrs	r3, r1, #31
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	1aca      	subs	r2, r1, r3
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <updateLedBuffer+0x74>)
 800127a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led3_4 / 10;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <updateLedBuffer+0x70>)
 8001280:	fb82 1203 	smull	r1, r2, r2, r3
 8001284:	1092      	asrs	r2, r2, #2
 8001286:	17db      	asrs	r3, r3, #31
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <updateLedBuffer+0x74>)
 800128c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led3_4 % 10;
 800128e:	6839      	ldr	r1, [r7, #0]
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <updateLedBuffer+0x70>)
 8001292:	fb83 2301 	smull	r2, r3, r3, r1
 8001296:	109a      	asrs	r2, r3, #2
 8001298:	17cb      	asrs	r3, r1, #31
 800129a:	1ad2      	subs	r2, r2, r3
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	1aca      	subs	r2, r1, r3
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <updateLedBuffer+0x74>)
 80012a8:	60da      	str	r2, [r3, #12]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	66666667 	.word	0x66666667
 80012b8:	200000a0 	.word	0x200000a0

080012bc <SetLed7Seg1On>:


void SetLed7Seg1On(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET );
 80012c0:	2200      	movs	r2, #0
 80012c2:	2101      	movs	r1, #1
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <SetLed7Seg1On+0x30>)
 80012c6:	f001 fa66 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 80012ca:	2201      	movs	r2, #1
 80012cc:	2102      	movs	r1, #2
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <SetLed7Seg1On+0x30>)
 80012d0:	f001 fa61 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 80012d4:	2201      	movs	r2, #1
 80012d6:	2110      	movs	r1, #16
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <SetLed7Seg1On+0x30>)
 80012da:	f001 fa5c 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 80012de:	2201      	movs	r2, #1
 80012e0:	2101      	movs	r1, #1
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <SetLed7Seg1On+0x34>)
 80012e4:	f001 fa57 	bl	8002796 <HAL_GPIO_WritePin>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40010c00 	.word	0x40010c00

080012f4 <SetLed7Seg2On>:
void SetLed7Seg2On(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 80012f8:	2201      	movs	r2, #1
 80012fa:	2101      	movs	r1, #1
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <SetLed7Seg2On+0x30>)
 80012fe:	f001 fa4a 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET );
 8001302:	2200      	movs	r2, #0
 8001304:	2102      	movs	r1, #2
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <SetLed7Seg2On+0x30>)
 8001308:	f001 fa45 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 800130c:	2201      	movs	r2, #1
 800130e:	2110      	movs	r1, #16
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <SetLed7Seg2On+0x30>)
 8001312:	f001 fa40 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8001316:	2201      	movs	r2, #1
 8001318:	2101      	movs	r1, #1
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <SetLed7Seg2On+0x34>)
 800131c:	f001 fa3b 	bl	8002796 <HAL_GPIO_WritePin>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00

0800132c <SetLed7Seg3On>:
void SetLed7Seg3On(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8001330:	2201      	movs	r2, #1
 8001332:	2101      	movs	r1, #1
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <SetLed7Seg3On+0x30>)
 8001336:	f001 fa2e 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 800133a:	2201      	movs	r2, #1
 800133c:	2102      	movs	r1, #2
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <SetLed7Seg3On+0x30>)
 8001340:	f001 fa29 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET );
 8001344:	2200      	movs	r2, #0
 8001346:	2110      	movs	r1, #16
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <SetLed7Seg3On+0x30>)
 800134a:	f001 fa24 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 800134e:	2201      	movs	r2, #1
 8001350:	2101      	movs	r1, #1
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <SetLed7Seg3On+0x34>)
 8001354:	f001 fa1f 	bl	8002796 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00

08001364 <SetLed7Seg4On>:
void SetLed7Seg4On(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8001368:	2201      	movs	r2, #1
 800136a:	2101      	movs	r1, #1
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <SetLed7Seg4On+0x30>)
 800136e:	f001 fa12 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 8001372:	2201      	movs	r2, #1
 8001374:	2102      	movs	r1, #2
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <SetLed7Seg4On+0x30>)
 8001378:	f001 fa0d 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 800137c:	2201      	movs	r2, #1
 800137e:	2110      	movs	r1, #16
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <SetLed7Seg4On+0x30>)
 8001382:	f001 fa08 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET );
 8001386:	2200      	movs	r2, #0
 8001388:	2101      	movs	r1, #1
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <SetLed7Seg4On+0x34>)
 800138c:	f001 fa03 	bl	8002796 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010800 	.word	0x40010800
 8001398:	40010c00 	.word	0x40010c00

0800139c <Led_scaning>:
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
}

void Led_scaning(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	switch(index_led){
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <Led_scaning+0xa8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d849      	bhi.n	800143c <Led_scaning+0xa0>
 80013a8:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <Led_scaning+0x14>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	080013c1 	.word	0x080013c1
 80013b4:	080013e1 	.word	0x080013e1
 80013b8:	08001401 	.word	0x08001401
 80013bc:	08001421 	.word	0x08001421
		case 0:{
			SetLed7Seg1On();
 80013c0:	f7ff ff7c 	bl	80012bc <SetLed7Seg1On>
//			update7SEG(index_led);
			display7SEG(led_buffer[index_led]);
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <Led_scaning+0xa8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1f      	ldr	r2, [pc, #124]	; (8001448 <Led_scaning+0xac>)
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd42 	bl	8000e58 <display7SEG>
			index_led++;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <Led_scaning+0xa8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <Led_scaning+0xa8>)
 80013dc:	6013      	str	r3, [r2, #0]
			break;
 80013de:	e02e      	b.n	800143e <Led_scaning+0xa2>
		}
		case 1:{
			SetLed7Seg2On();
 80013e0:	f7ff ff88 	bl	80012f4 <SetLed7Seg2On>
//			update7SEG(index_led);
			display7SEG(led_buffer[index_led]);
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <Led_scaning+0xa8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <Led_scaning+0xac>)
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fd32 	bl	8000e58 <display7SEG>
			index_led++;
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <Led_scaning+0xa8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <Led_scaning+0xa8>)
 80013fc:	6013      	str	r3, [r2, #0]
			break;
 80013fe:	e01e      	b.n	800143e <Led_scaning+0xa2>

		}
		case 2:{
			SetLed7Seg3On();
 8001400:	f7ff ff94 	bl	800132c <SetLed7Seg3On>
//			update7SEG(index_led);
			display7SEG(led_buffer[index_led]);
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <Led_scaning+0xa8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <Led_scaning+0xac>)
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fd22 	bl	8000e58 <display7SEG>
			index_led++;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <Led_scaning+0xa8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <Led_scaning+0xa8>)
 800141c:	6013      	str	r3, [r2, #0]
			break;
 800141e:	e00e      	b.n	800143e <Led_scaning+0xa2>
		}
		case 3:{
			SetLed7Seg4On();
 8001420:	f7ff ffa0 	bl	8001364 <SetLed7Seg4On>
//			update7SEG(index_led);
			display7SEG(led_buffer[index_led]);
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <Led_scaning+0xa8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <Led_scaning+0xac>)
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fd12 	bl	8000e58 <display7SEG>
			index_led = 0;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <Led_scaning+0xa8>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
			break;
 800143a:	e000      	b.n	800143e <Led_scaning+0xa2>

		}
		default:
			break;
 800143c:	bf00      	nop

	}

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000040 	.word	0x20000040
 8001448:	200000a0 	.word	0x200000a0

0800144c <Buzzer_On>:
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
	return len;
}

int dutycycle;
void Buzzer_On(){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
//		if (timer6_flag == 1){
//			dutycycle += 1000 / ((5)*5);
//			if (dutycycle > 1000)
			dutycycle = 100;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <Buzzer_On+0x1c>)
 8001452:	2264      	movs	r2, #100	; 0x64
 8001454:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <Buzzer_On+0x1c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <Buzzer_On+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
//			HAL_Delay(delay);
//			setTimer6(delay);
//			delay -= increase;
//			if (delay <= 0) delay = 10;
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	20000184 	.word	0x20000184
 800146c:	200000f8 	.word	0x200000f8

08001470 <Buzzer_Off>:

void Buzzer_Off(){
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	dutycycle = 0;
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <Buzzer_Off+0x1c>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <Buzzer_Off+0x1c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <Buzzer_Off+0x20>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000184 	.word	0x20000184
 8001490:	200000f8 	.word	0x200000f8

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001498:	f000 fe72 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149c:	f000 f86a 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a0:	f000 f97a 	bl	8001798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014a4:	f000 f94e 	bl	8001744 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80014a8:	f000 f8a6 	bl	80015f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014ac:	f000 f8f0 	bl	8001690 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014b0:	4827      	ldr	r0, [pc, #156]	; (8001550 <main+0xbc>)
 80014b2:	f001 fe2d 	bl	8003110 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014b6:	2100      	movs	r1, #0
 80014b8:	4826      	ldr	r0, [pc, #152]	; (8001554 <main+0xc0>)
 80014ba:	f001 fecb 	bl	8003254 <HAL_TIM_PWM_Start>


  status_mode = INIT;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <main+0xc4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]



  setClock(0,0,0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7fe fe6f 	bl	80001ac <setClock>
  SCH_Init();
 80014ce:	f000 fa27 	bl	8001920 <SCH_Init>
//  SetLed7SegAllOn();
  SCH_Add_Task(clock, 0, 10000);
 80014d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80014d6:	2100      	movs	r1, #0
 80014d8:	4820      	ldr	r0, [pc, #128]	; (800155c <main+0xc8>)
 80014da:	f000 fa2d 	bl	8001938 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 100);
 80014de:	2264      	movs	r2, #100	; 0x64
 80014e0:	2100      	movs	r1, #0
 80014e2:	481f      	ldr	r0, [pc, #124]	; (8001560 <main+0xcc>)
 80014e4:	f000 fa28 	bl	8001938 <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_run, 0 , 100);
 80014e8:	2264      	movs	r2, #100	; 0x64
 80014ea:	2100      	movs	r1, #0
 80014ec:	481d      	ldr	r0, [pc, #116]	; (8001564 <main+0xd0>)
 80014ee:	f000 fa23 	bl	8001938 <SCH_Add_Task>
  SCH_Add_Task(fsm_buz_run, 50000, 100);
 80014f2:	2264      	movs	r2, #100	; 0x64
 80014f4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80014f8:	481b      	ldr	r0, [pc, #108]	; (8001568 <main+0xd4>)
 80014fa:	f000 fa1d 	bl	8001938 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 100);
 80014fe:	2264      	movs	r2, #100	; 0x64
 8001500:	2100      	movs	r1, #0
 8001502:	481a      	ldr	r0, [pc, #104]	; (800156c <main+0xd8>)
 8001504:	f000 fa18 	bl	8001938 <SCH_Add_Task>
  SCH_Add_Task(Led_scaning, 0 , 10);
 8001508:	220a      	movs	r2, #10
 800150a:	2100      	movs	r1, #0
 800150c:	4818      	ldr	r0, [pc, #96]	; (8001570 <main+0xdc>)
 800150e:	f000 fa13 	bl	8001938 <SCH_Add_Task>
//  SCH_Add_Task(fsm_mode_led7seg, 0, 10);


  setTimer0(1000);
 8001512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001516:	f000 fb91 	bl	8001c3c <setTimer0>
  setTimer1(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151e:	f000 fba7 	bl	8001c70 <setTimer1>
  setTimer2(1000);
 8001522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001526:	f000 fbbd 	bl	8001ca4 <setTimer2>
  setTimer3(1000);
 800152a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800152e:	f000 fbd3 	bl	8001cd8 <setTimer3>
  setTimer4(1000);
 8001532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001536:	f000 fbe9 	bl	8001d0c <setTimer4>
  setTimer5(1000);
 800153a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153e:	f000 fbff 	bl	8001d40 <setTimer5>
  setTimer6(1000);
 8001542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001546:	f000 fc15 	bl	8001d74 <setTimer6>
//	  }


//		  Buzzer_On();

	  SCH_Dispatch_Tasks();
 800154a:	f000 fab5 	bl	8001ab8 <SCH_Dispatch_Tasks>
 800154e:	e7fc      	b.n	800154a <main+0xb6>
 8001550:	200000b0 	.word	0x200000b0
 8001554:	200000f8 	.word	0x200000f8
 8001558:	20000038 	.word	0x20000038
 800155c:	0800014d 	.word	0x0800014d
 8001560:	08001da9 	.word	0x08001da9
 8001564:	080002c9 	.word	0x080002c9
 8001568:	080001e1 	.word	0x080001e1
 800156c:	08000d61 	.word	0x08000d61
 8001570:	0800139d 	.word	0x0800139d

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b090      	sub	sp, #64	; 0x40
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	2228      	movs	r2, #40	; 0x28
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fdca 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159e:	2310      	movs	r3, #16
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 f941 	bl	800283c <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80015c0:	f000 f9a8 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2102      	movs	r1, #2
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fbae 	bl	8002d40 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80015ea:	f000 f993 	bl	8001914 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3740      	adds	r7, #64	; 0x40
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_TIM2_Init+0x94>)
 8001616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_TIM2_Init+0x94>)
 800161e:	f240 227f 	movw	r2, #639	; 0x27f
 8001622:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <MX_TIM2_Init+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <MX_TIM2_Init+0x94>)
 800162c:	2263      	movs	r2, #99	; 0x63
 800162e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_TIM2_Init+0x94>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <MX_TIM2_Init+0x94>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <MX_TIM2_Init+0x94>)
 800163e:	f001 fd17 	bl	8003070 <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001648:	f000 f964 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <MX_TIM2_Init+0x94>)
 800165a:	f002 f863 	bl	8003724 <HAL_TIM_ConfigClockSource>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001664:	f000 f956 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_TIM2_Init+0x94>)
 8001676:	f002 fbe1 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001680:	f000 f948 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200000b0 	.word	0x200000b0

08001690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <MX_TIM3_Init+0xac>)
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <MX_TIM3_Init+0xb0>)
 80016b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <MX_TIM3_Init+0xac>)
 80016ba:	223f      	movs	r2, #63	; 0x3f
 80016bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <MX_TIM3_Init+0xac>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_TIM3_Init+0xac>)
 80016c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM3_Init+0xac>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM3_Init+0xac>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016d8:	4818      	ldr	r0, [pc, #96]	; (800173c <MX_TIM3_Init+0xac>)
 80016da:	f001 fd6b 	bl	80031b4 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016e4:	f000 f916 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4619      	mov	r1, r3
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <MX_TIM3_Init+0xac>)
 80016f8:	f002 fba0 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001702:	f000 f907 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	; 0x60
 8001708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <MX_TIM3_Init+0xac>)
 800171e:	f001 ff43 	bl	80035a8 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001728:	f000 f8f4 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <MX_TIM3_Init+0xac>)
 800172e:	f000 fc41 	bl	8001fb4 <HAL_TIM_MspPostInit>

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000f8 	.word	0x200000f8
 8001740:	40000400 	.word	0x40000400

08001744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_USART2_UART_Init+0x50>)
 800174c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800177c:	f002 fbce 	bl	8003f1c <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001786:	f000 f8c5 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000140 	.word	0x20000140
 8001794:	40004400 	.word	0x40004400

08001798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ac:	4b54      	ldr	r3, [pc, #336]	; (8001900 <MX_GPIO_Init+0x168>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a53      	ldr	r2, [pc, #332]	; (8001900 <MX_GPIO_Init+0x168>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b51      	ldr	r3, [pc, #324]	; (8001900 <MX_GPIO_Init+0x168>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c4:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <MX_GPIO_Init+0x168>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a4d      	ldr	r2, [pc, #308]	; (8001900 <MX_GPIO_Init+0x168>)
 80017ca:	f043 0320 	orr.w	r3, r3, #32
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <MX_GPIO_Init+0x168>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b48      	ldr	r3, [pc, #288]	; (8001900 <MX_GPIO_Init+0x168>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a47      	ldr	r2, [pc, #284]	; (8001900 <MX_GPIO_Init+0x168>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b45      	ldr	r3, [pc, #276]	; (8001900 <MX_GPIO_Init+0x168>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b42      	ldr	r3, [pc, #264]	; (8001900 <MX_GPIO_Init+0x168>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a41      	ldr	r2, [pc, #260]	; (8001900 <MX_GPIO_Init+0x168>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <MX_GPIO_Init+0x168>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GRE_Pin|DOT_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2103      	movs	r1, #3
 8001810:	483c      	ldr	r0, [pc, #240]	; (8001904 <MX_GPIO_Init+0x16c>)
 8001812:	f000 ffc0 	bl	8002796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|LED_F_Pin
 8001816:	2200      	movs	r2, #0
 8001818:	f240 7113 	movw	r1, #1811	; 0x713
 800181c:	483a      	ldr	r0, [pc, #232]	; (8001908 <MX_GPIO_Init+0x170>)
 800181e:	f000 ffba 	bl	8002796 <HAL_GPIO_WritePin>
                          |LED_G_Pin|LED_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN3_Pin|LED_E_Pin|LED_B_Pin|LED_D_Pin
 8001822:	2200      	movs	r2, #0
 8001824:	f240 7139 	movw	r1, #1849	; 0x739
 8001828:	4838      	ldr	r0, [pc, #224]	; (800190c <MX_GPIO_Init+0x174>)
 800182a:	f000 ffb4 	bl	8002796 <HAL_GPIO_WritePin>
                          |LED_C_Pin|LED_YEL_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800182e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <MX_GPIO_Init+0x178>)
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4619      	mov	r1, r3
 8001842:	4830      	ldr	r0, [pc, #192]	; (8001904 <MX_GPIO_Init+0x16c>)
 8001844:	f000 fe0c 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GRE_Pin DOT_Pin */
  GPIO_InitStruct.Pin = LED_GRE_Pin|DOT_Pin;
 8001848:	2303      	movs	r3, #3
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2302      	movs	r3, #2
 8001856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	4829      	ldr	r0, [pc, #164]	; (8001904 <MX_GPIO_Init+0x16c>)
 8001860:	f000 fdfe 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin LED_F_Pin
                           LED_G_Pin LED_A_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|LED_F_Pin
 8001864:	f240 7313 	movw	r3, #1811	; 0x713
 8001868:	613b      	str	r3, [r7, #16]
                          |LED_G_Pin|LED_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2302      	movs	r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4619      	mov	r1, r3
 800187c:	4822      	ldr	r0, [pc, #136]	; (8001908 <MX_GPIO_Init+0x170>)
 800187e:	f000 fdef 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|SET_Pin;
 8001882:	23a0      	movs	r3, #160	; 0xa0
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	4619      	mov	r1, r3
 8001894:	481c      	ldr	r0, [pc, #112]	; (8001908 <MX_GPIO_Init+0x170>)
 8001896:	f000 fde3 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN3_Pin LED_E_Pin LED_B_Pin LED_D_Pin
                           LED_C_Pin LED_YEL_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = EN3_Pin|LED_E_Pin|LED_B_Pin|LED_D_Pin
 800189a:	f240 7339 	movw	r3, #1849	; 0x739
 800189e:	613b      	str	r3, [r7, #16]
                          |LED_C_Pin|LED_YEL_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	4816      	ldr	r0, [pc, #88]	; (800190c <MX_GPIO_Init+0x174>)
 80018b4:	f000 fdd4 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOWN_Pin */
  GPIO_InitStruct.Pin = DOWN_Pin;
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DOWN_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4619      	mov	r1, r3
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <MX_GPIO_Init+0x16c>)
 80018cc:	f000 fdc8 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : UP_Pin */
  GPIO_InitStruct.Pin = UP_Pin;
 80018d0:	2340      	movs	r3, #64	; 0x40
 80018d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UP_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4619      	mov	r1, r3
 80018e2:	480a      	ldr	r0, [pc, #40]	; (800190c <MX_GPIO_Init+0x174>)
 80018e4:	f000 fdbc 	bl	8002460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	2028      	movs	r0, #40	; 0x28
 80018ee:	f000 fd80 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018f2:	2028      	movs	r0, #40	; 0x28
 80018f4:	f000 fd99 	bl	800242a <HAL_NVIC_EnableIRQ>

}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40011000 	.word	0x40011000
 8001908:	40010800 	.word	0x40010800
 800190c:	40010c00 	.word	0x40010c00
 8001910:	10110000 	.word	0x10110000

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <SCH_Init>:
 */
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <SCH_Init+0x14>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200004a8 	.word	0x200004a8

08001938 <SCH_Add_Task>:

//int Tick = 10; // 10ms

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <SCH_Add_Task+0xb4>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b27      	cmp	r3, #39	; 0x27
 800194a:	d84a      	bhi.n	80019e2 <SCH_Add_Task+0xaa>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <SCH_Add_Task+0xb4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <SCH_Add_Task+0xb8>)
 8001954:	460b      	mov	r3, r1
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TICK;
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <SCH_Add_Task+0xb4>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <SCH_Add_Task+0xbc>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	491f      	ldr	r1, [pc, #124]	; (80019f0 <SCH_Add_Task+0xb8>)
 8001974:	4603      	mov	r3, r0
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4403      	add	r3, r0
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3304      	adds	r3, #4
 8001980:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD/TICK;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <SCH_Add_Task+0xb4>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <SCH_Add_Task+0xbc>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	4917      	ldr	r1, [pc, #92]	; (80019f0 <SCH_Add_Task+0xb8>)
 8001994:	4603      	mov	r3, r0
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4403      	add	r3, r0
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3308      	adds	r3, #8
 80019a0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SCH_Add_Task+0xb4>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <SCH_Add_Task+0xb8>)
 80019aa:	460b      	mov	r3, r1
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	330c      	adds	r3, #12
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <SCH_Add_Task+0xb4>)
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <SCH_Add_Task+0xb4>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SCH_Add_Task+0xb8>)
 80019c8:	460b      	mov	r3, r1
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3310      	adds	r3, #16
 80019d4:	6018      	str	r0, [r3, #0]


		current_index_task++;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SCH_Add_Task+0xb4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b03      	ldr	r3, [pc, #12]	; (80019ec <SCH_Add_Task+0xb4>)
 80019e0:	701a      	strb	r2, [r3, #0]
	}
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	200004a8 	.word	0x200004a8
 80019f0:	20000188 	.word	0x20000188
 80019f4:	cccccccd 	.word	0xcccccccd

080019f8 <SCH_Update>:

void SCH_Update(void){
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	e048      	b.n	8001a96 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0 ){
 8001a04:	492a      	ldr	r1, [pc, #168]	; (8001ab0 <SCH_Update+0xb8>)
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3304      	adds	r3, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d013      	beq.n	8001a42 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8001a1a:	4925      	ldr	r1, [pc, #148]	; (8001ab0 <SCH_Update+0xb8>)
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3304      	adds	r3, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	1e59      	subs	r1, r3, #1
 8001a2e:	4820      	ldr	r0, [pc, #128]	; (8001ab0 <SCH_Update+0xb8>)
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4403      	add	r3, r0
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	6019      	str	r1, [r3, #0]
 8001a40:	e026      	b.n	8001a90 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay =SCH_tasks_G[i].Period;
 8001a42:	491b      	ldr	r1, [pc, #108]	; (8001ab0 <SCH_Update+0xb8>)
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3308      	adds	r3, #8
 8001a52:	6819      	ldr	r1, [r3, #0]
 8001a54:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <SCH_Update+0xb8>)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4403      	add	r3, r0
 8001a62:	3304      	adds	r3, #4
 8001a64:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8001a66:	4912      	ldr	r1, [pc, #72]	; (8001ab0 <SCH_Update+0xb8>)
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	330c      	adds	r3, #12
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2d8      	uxtb	r0, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <SCH_Update+0xb8>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	330c      	adds	r3, #12
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < current_index_task; i++){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3301      	adds	r3, #1
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <SCH_Update+0xbc>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	dbb0      	blt.n	8001a04 <SCH_Update+0xc>
		}
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000188 	.word	0x20000188
 8001ab4:	200004a8 	.word	0x200004a8

08001ab8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	e039      	b.n	8001b38 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[i].RunMe > 0 ){
 8001ac4:	4922      	ldr	r1, [pc, #136]	; (8001b50 <SCH_Dispatch_Tasks+0x98>)
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	330c      	adds	r3, #12
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02b      	beq.n	8001b32 <SCH_Dispatch_Tasks+0x7a>
			SCH_tasks_G[i].RunMe--;
 8001ada:	491d      	ldr	r1, [pc, #116]	; (8001b50 <SCH_Dispatch_Tasks+0x98>)
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	330c      	adds	r3, #12
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b2d8      	uxtb	r0, r3
 8001af0:	4917      	ldr	r1, [pc, #92]	; (8001b50 <SCH_Dispatch_Tasks+0x98>)
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	330c      	adds	r3, #12
 8001b00:	4602      	mov	r2, r0
 8001b02:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)(); // Run the task
 8001b04:	4912      	ldr	r1, [pc, #72]	; (8001b50 <SCH_Dispatch_Tasks+0x98>)
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4798      	blx	r3
			if (SCH_tasks_G[i].Period == 0 ){ // one shot task
 8001b16:	490e      	ldr	r1, [pc, #56]	; (8001b50 <SCH_Dispatch_Tasks+0x98>)
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	3308      	adds	r3, #8
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(i);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f813 	bl	8001b58 <SCH_Delete_Task>
	for (int i = 0 ; i < current_index_task; i++){
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3301      	adds	r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <SCH_Dispatch_Tasks+0x9c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	dbbf      	blt.n	8001ac4 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000188 	.word	0x20000188
 8001b54:	200004a8 	.word	0x200004a8

08001b58 <SCH_Delete_Task>:


void SCH_Delete_Task(int index){
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	if (index >= current_index_task ){ //
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <SCH_Delete_Task+0xdc>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	da5d      	bge.n	8001c28 <SCH_Delete_Task+0xd0>

		return;
	}else {
		for (int i = index; i <current_index_task - 1; i++){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e04d      	b.n	8001c0e <SCH_Delete_Task+0xb6>
			SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	4930      	ldr	r1, [pc, #192]	; (8001c38 <SCH_Delete_Task+0xe0>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	482c      	ldr	r0, [pc, #176]	; (8001c38 <SCH_Delete_Task+0xe0>)
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4403      	add	r3, r0
 8001b92:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4927      	ldr	r1, [pc, #156]	; (8001c38 <SCH_Delete_Task+0xe0>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	4823      	ldr	r0, [pc, #140]	; (8001c38 <SCH_Delete_Task+0xe0>)
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4403      	add	r3, r0
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	491e      	ldr	r1, [pc, #120]	; (8001c38 <SCH_Delete_Task+0xe0>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	330c      	adds	r3, #12
 8001bcc:	7818      	ldrb	r0, [r3, #0]
 8001bce:	491a      	ldr	r1, [pc, #104]	; (8001c38 <SCH_Delete_Task+0xe0>)
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	330c      	adds	r3, #12
 8001bde:	4602      	mov	r2, r0
 8001be0:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	4914      	ldr	r1, [pc, #80]	; (8001c38 <SCH_Delete_Task+0xe0>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	4810      	ldr	r0, [pc, #64]	; (8001c38 <SCH_Delete_Task+0xe0>)
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4403      	add	r3, r0
 8001c04:	3304      	adds	r3, #4
 8001c06:	6019      	str	r1, [r3, #0]
		for (int i = index; i <current_index_task - 1; i++){
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <SCH_Delete_Task+0xdc>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbab      	blt.n	8001b72 <SCH_Delete_Task+0x1a>
		}
		current_index_task--;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <SCH_Delete_Task+0xdc>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SCH_Delete_Task+0xdc>)
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e000      	b.n	8001c2a <SCH_Delete_Task+0xd2>
		return;
 8001c28:	bf00      	nop
	}
}
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200004a8 	.word	0x200004a8
 8001c38:	20000188 	.word	0x20000188

08001c3c <setTimer0>:
void clearTimer6(){
	timer6_counter = 0;
	timer6_flag = 1;
}

void setTimer0 ( int duration ){
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <setTimer0+0x28>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c4e:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <setTimer0+0x2c>)
 8001c50:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <setTimer0+0x30>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	200004c8 	.word	0x200004c8
 8001c6c:	200004ac 	.word	0x200004ac

08001c70 <setTimer1>:
void setTimer1( int duration){
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <setTimer1+0x28>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c82:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <setTimer1+0x2c>)
 8001c84:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <setTimer1+0x30>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000000c 	.word	0x2000000c
 8001c9c:	200004cc 	.word	0x200004cc
 8001ca0:	200004b0 	.word	0x200004b0

08001ca4 <setTimer2>:

void setTimer2( int duration){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <setTimer2+0x28>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <setTimer2+0x2c>)
 8001cb8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <setTimer2+0x30>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	200004d0 	.word	0x200004d0
 8001cd4:	200004b4 	.word	0x200004b4

08001cd8 <setTimer3>:

void setTimer3( int duration){
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <setTimer3+0x28>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cea:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <setTimer3+0x2c>)
 8001cec:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <setTimer3+0x30>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	2000000c 	.word	0x2000000c
 8001d04:	200004d4 	.word	0x200004d4
 8001d08:	200004b8 	.word	0x200004b8

08001d0c <setTimer4>:

void setTimer4( int duration){
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <setTimer4+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d1e:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <setTimer4+0x2c>)
 8001d20:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <setTimer4+0x30>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	200004d8 	.word	0x200004d8
 8001d3c:	200004bc 	.word	0x200004bc

08001d40 <setTimer5>:

void setTimer5( int duration){
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <setTimer5+0x28>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d52:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <setTimer5+0x2c>)
 8001d54:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <setTimer5+0x30>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	2000000c 	.word	0x2000000c
 8001d6c:	200004dc 	.word	0x200004dc
 8001d70:	200004c0 	.word	0x200004c0

08001d74 <setTimer6>:
void setTimer6( int duration){
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <setTimer6+0x28>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d86:	4a06      	ldr	r2, [pc, #24]	; (8001da0 <setTimer6+0x2c>)
 8001d88:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <setTimer6+0x30>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	2000000c 	.word	0x2000000c
 8001da0:	200004e0 	.word	0x200004e0
 8001da4:	200004c4 	.word	0x200004c4

08001da8 <timerRun>:

void timerRun (){
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001dac:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <timerRun+0xec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dd0b      	ble.n	8001dcc <timerRun+0x24>
		timer0_counter --;
 8001db4:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <timerRun+0xec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	4a36      	ldr	r2, [pc, #216]	; (8001e94 <timerRun+0xec>)
 8001dbc:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <timerRun+0xec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	dc02      	bgt.n	8001dcc <timerRun+0x24>
			timer0_flag = 1;
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <timerRun+0xf0>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8001dcc:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <timerRun+0xf4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd0b      	ble.n	8001dec <timerRun+0x44>
		timer1_counter--;
 8001dd4:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <timerRun+0xf4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <timerRun+0xf4>)
 8001ddc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <timerRun+0xf4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	dc02      	bgt.n	8001dec <timerRun+0x44>
			timer1_flag = 1;
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <timerRun+0xf8>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <timerRun+0xfc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	dd0b      	ble.n	8001e0c <timerRun+0x64>
		timer2_counter--;
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <timerRun+0xfc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <timerRun+0xfc>)
 8001dfc:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <timerRun+0xfc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dc02      	bgt.n	8001e0c <timerRun+0x64>
			timer2_flag = 1;
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <timerRun+0x100>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <timerRun+0x104>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	dd0b      	ble.n	8001e2c <timerRun+0x84>
		timer3_counter--;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <timerRun+0x104>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	4a24      	ldr	r2, [pc, #144]	; (8001eac <timerRun+0x104>)
 8001e1c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <timerRun+0x104>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	dc02      	bgt.n	8001e2c <timerRun+0x84>
			timer3_flag = 1;
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <timerRun+0x108>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <timerRun+0x10c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	dd0b      	ble.n	8001e4c <timerRun+0xa4>
		timer4_counter--;
 8001e34:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <timerRun+0x10c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <timerRun+0x10c>)
 8001e3c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <timerRun+0x10c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	dc02      	bgt.n	8001e4c <timerRun+0xa4>
			timer4_flag = 1;
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <timerRun+0x110>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <timerRun+0x114>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	dd0b      	ble.n	8001e6c <timerRun+0xc4>
			timer5_counter--;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <timerRun+0x114>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <timerRun+0x114>)
 8001e5c:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <timerRun+0x114>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	dc02      	bgt.n	8001e6c <timerRun+0xc4>
				timer5_flag = 1;
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <timerRun+0x118>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <timerRun+0x11c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dd0b      	ble.n	8001e8c <timerRun+0xe4>
			timer6_counter--;
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <timerRun+0x11c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <timerRun+0x11c>)
 8001e7c:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <timerRun+0x11c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dc02      	bgt.n	8001e8c <timerRun+0xe4>
				timer6_flag = 1;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <timerRun+0x120>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	200004c8 	.word	0x200004c8
 8001e98:	200004ac 	.word	0x200004ac
 8001e9c:	200004cc 	.word	0x200004cc
 8001ea0:	200004b0 	.word	0x200004b0
 8001ea4:	200004d0 	.word	0x200004d0
 8001ea8:	200004b4 	.word	0x200004b4
 8001eac:	200004d4 	.word	0x200004d4
 8001eb0:	200004b8 	.word	0x200004b8
 8001eb4:	200004d8 	.word	0x200004d8
 8001eb8:	200004bc 	.word	0x200004bc
 8001ebc:	200004dc 	.word	0x200004dc
 8001ec0:	200004c0 	.word	0x200004c0
 8001ec4:	200004e0 	.word	0x200004e0
 8001ec8:	200004c4 	.word	0x200004c4

08001ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_MspInit+0x5c>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <HAL_MspInit+0x5c>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6193      	str	r3, [r2, #24]
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_MspInit+0x5c>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_MspInit+0x5c>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_MspInit+0x5c>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_MspInit+0x5c>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_MspInit+0x60>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_MspInit+0x60>)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000

08001f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f40:	d113      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_TIM_Base_MspInit+0x44>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_TIM_Base_MspInit+0x44>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_TIM_Base_MspInit+0x44>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	201c      	movs	r0, #28
 8001f60:	f000 fa47 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f64:	201c      	movs	r0, #28
 8001f66:	f000 fa60 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000

08001f78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_TIM_PWM_MspInit+0x34>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10b      	bne.n	8001fa2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x38>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x38>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x38>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_TIM_MspPostInit+0x58>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d117      	bne.n	8002004 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_TIM_MspPostInit+0x5c>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <HAL_TIM_MspPostInit+0x5c>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_TIM_MspPostInit+0x5c>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fec:	2340      	movs	r3, #64	; 0x40
 8001fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <HAL_TIM_MspPostInit+0x60>)
 8002000:	f000 fa2e 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40000400 	.word	0x40000400
 8002010:	40021000 	.word	0x40021000
 8002014:	40010800 	.word	0x40010800

08002018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <HAL_UART_MspInit+0x70>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d123      	bne.n	8002080 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_UART_MspInit+0x74>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_UART_MspInit+0x74>)
 800203e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002042:	61d3      	str	r3, [r2, #28]
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_UART_MspInit+0x74>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_UART_MspInit+0x74>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <HAL_UART_MspInit+0x74>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_UART_MspInit+0x74>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002068:	230c      	movs	r3, #12
 800206a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2302      	movs	r3, #2
 8002072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <HAL_UART_MspInit+0x78>)
 800207c:	f000 f9f0 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002080:	bf00      	nop
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40004400 	.word	0x40004400
 800208c:	40021000 	.word	0x40021000
 8002090:	40010800 	.word	0x40010800

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <NMI_Handler+0x4>

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020da:	f000 f897 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TIM2_IRQHandler+0x10>)
 80020ea:	f001 f955 	bl	8003398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200000b0 	.word	0x200000b0

080020f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002100:	f000 fb7a 	bl	80027f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d101      	bne.n	800212a <HAL_TIM_PeriodElapsedCallback+0x16>
//		button_reading();
//		timerRun();
		//getKeyInput();
		SCH_Update();
 8002126:	f7ff fc67 	bl	80019f8 <SCH_Update>
	}
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800215a:	f7ff ffd5 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215e:	f001 ffb9 	bl	80040d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002162:	f7ff f997 	bl	8001494 <main>
  bx lr
 8002166:	4770      	bx	lr
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002170:	08004174 	.word	0x08004174
  ldr r2, =_sbss
 8002174:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002178:	200004e8 	.word	0x200004e8

0800217c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_2_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_Init+0x28>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_Init+0x28>)
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 f923 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	2000      	movs	r0, #0
 8002198:	f000 f808 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7ff fe96 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000

080021ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x54>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x58>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f93b 	bl	8002446 <HAL_SYSTICK_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00e      	b.n	80021f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d80a      	bhi.n	80021f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f000 f903 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <HAL_InitTick+0x5c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000010 	.word	0x20000010
 8002204:	20000018 	.word	0x20000018
 8002208:	20000014 	.word	0x20000014

0800220c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_IncTick+0x1c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_IncTick+0x20>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a03      	ldr	r2, [pc, #12]	; (800222c <HAL_IncTick+0x20>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	20000018 	.word	0x20000018
 800222c:	200004e4 	.word	0x200004e4

08002230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <HAL_GetTick+0x10>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	200004e4 	.word	0x200004e4

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4906      	ldr	r1, [pc, #24]	; (80022dc <__NVIC_EnableIRQ+0x34>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff90 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff2d 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff42 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff90 	bl	8002334 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5f 	bl	80022e0 <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff35 	bl	80022a8 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b08b      	sub	sp, #44	; 0x2c
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002472:	e169      	b.n	8002748 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002474:	2201      	movs	r2, #1
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8158 	bne.w	8002742 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a9a      	ldr	r2, [pc, #616]	; (8002700 <HAL_GPIO_Init+0x2a0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d05e      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 800249c:	4a98      	ldr	r2, [pc, #608]	; (8002700 <HAL_GPIO_Init+0x2a0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d875      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024a2:	4a98      	ldr	r2, [pc, #608]	; (8002704 <HAL_GPIO_Init+0x2a4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d058      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 80024a8:	4a96      	ldr	r2, [pc, #600]	; (8002704 <HAL_GPIO_Init+0x2a4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d86f      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024ae:	4a96      	ldr	r2, [pc, #600]	; (8002708 <HAL_GPIO_Init+0x2a8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d052      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 80024b4:	4a94      	ldr	r2, [pc, #592]	; (8002708 <HAL_GPIO_Init+0x2a8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d869      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024ba:	4a94      	ldr	r2, [pc, #592]	; (800270c <HAL_GPIO_Init+0x2ac>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d04c      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 80024c0:	4a92      	ldr	r2, [pc, #584]	; (800270c <HAL_GPIO_Init+0x2ac>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d863      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024c6:	4a92      	ldr	r2, [pc, #584]	; (8002710 <HAL_GPIO_Init+0x2b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d046      	beq.n	800255a <HAL_GPIO_Init+0xfa>
 80024cc:	4a90      	ldr	r2, [pc, #576]	; (8002710 <HAL_GPIO_Init+0x2b0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d85d      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d82a      	bhi.n	800252c <HAL_GPIO_Init+0xcc>
 80024d6:	2b12      	cmp	r3, #18
 80024d8:	d859      	bhi.n	800258e <HAL_GPIO_Init+0x12e>
 80024da:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <HAL_GPIO_Init+0x80>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	0800255b 	.word	0x0800255b
 80024e4:	08002535 	.word	0x08002535
 80024e8:	08002547 	.word	0x08002547
 80024ec:	08002589 	.word	0x08002589
 80024f0:	0800258f 	.word	0x0800258f
 80024f4:	0800258f 	.word	0x0800258f
 80024f8:	0800258f 	.word	0x0800258f
 80024fc:	0800258f 	.word	0x0800258f
 8002500:	0800258f 	.word	0x0800258f
 8002504:	0800258f 	.word	0x0800258f
 8002508:	0800258f 	.word	0x0800258f
 800250c:	0800258f 	.word	0x0800258f
 8002510:	0800258f 	.word	0x0800258f
 8002514:	0800258f 	.word	0x0800258f
 8002518:	0800258f 	.word	0x0800258f
 800251c:	0800258f 	.word	0x0800258f
 8002520:	0800258f 	.word	0x0800258f
 8002524:	0800253d 	.word	0x0800253d
 8002528:	08002551 	.word	0x08002551
 800252c:	4a79      	ldr	r2, [pc, #484]	; (8002714 <HAL_GPIO_Init+0x2b4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002532:	e02c      	b.n	800258e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	623b      	str	r3, [r7, #32]
          break;
 800253a:	e029      	b.n	8002590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	3304      	adds	r3, #4
 8002542:	623b      	str	r3, [r7, #32]
          break;
 8002544:	e024      	b.n	8002590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	3308      	adds	r3, #8
 800254c:	623b      	str	r3, [r7, #32]
          break;
 800254e:	e01f      	b.n	8002590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	330c      	adds	r3, #12
 8002556:	623b      	str	r3, [r7, #32]
          break;
 8002558:	e01a      	b.n	8002590 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002562:	2304      	movs	r3, #4
 8002564:	623b      	str	r3, [r7, #32]
          break;
 8002566:	e013      	b.n	8002590 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002570:	2308      	movs	r3, #8
 8002572:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	611a      	str	r2, [r3, #16]
          break;
 800257a:	e009      	b.n	8002590 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800257c:	2308      	movs	r3, #8
 800257e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	615a      	str	r2, [r3, #20]
          break;
 8002586:	e003      	b.n	8002590 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
          break;
 800258c:	e000      	b.n	8002590 <HAL_GPIO_Init+0x130>
          break;
 800258e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	d801      	bhi.n	800259a <HAL_GPIO_Init+0x13a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	e001      	b.n	800259e <HAL_GPIO_Init+0x13e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2bff      	cmp	r3, #255	; 0xff
 80025a4:	d802      	bhi.n	80025ac <HAL_GPIO_Init+0x14c>
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x152>
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	3b08      	subs	r3, #8
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	210f      	movs	r1, #15
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	401a      	ands	r2, r3
 80025c4:	6a39      	ldr	r1, [r7, #32]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	431a      	orrs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80b1 	beq.w	8002742 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_GPIO_Init+0x2b8>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	; (8002718 <HAL_GPIO_Init+0x2b8>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_GPIO_Init+0x2b8>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025f8:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_GPIO_Init+0x2bc>)
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002604:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a40      	ldr	r2, [pc, #256]	; (8002720 <HAL_GPIO_Init+0x2c0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <HAL_GPIO_Init+0x1ec>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <HAL_GPIO_Init+0x2c4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00d      	beq.n	8002648 <HAL_GPIO_Init+0x1e8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a3e      	ldr	r2, [pc, #248]	; (8002728 <HAL_GPIO_Init+0x2c8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d007      	beq.n	8002644 <HAL_GPIO_Init+0x1e4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a3d      	ldr	r2, [pc, #244]	; (800272c <HAL_GPIO_Init+0x2cc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_GPIO_Init+0x1e0>
 800263c:	2303      	movs	r3, #3
 800263e:	e006      	b.n	800264e <HAL_GPIO_Init+0x1ee>
 8002640:	2304      	movs	r3, #4
 8002642:	e004      	b.n	800264e <HAL_GPIO_Init+0x1ee>
 8002644:	2302      	movs	r3, #2
 8002646:	e002      	b.n	800264e <HAL_GPIO_Init+0x1ee>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_GPIO_Init+0x1ee>
 800264c:	2300      	movs	r3, #0
 800264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002650:	f002 0203 	and.w	r2, r2, #3
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	4093      	lsls	r3, r2
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800265e:	492f      	ldr	r1, [pc, #188]	; (800271c <HAL_GPIO_Init+0x2bc>)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002678:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	492c      	ldr	r1, [pc, #176]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	43db      	mvns	r3, r3
 800268e:	4928      	ldr	r1, [pc, #160]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 8002690:	4013      	ands	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4922      	ldr	r1, [pc, #136]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	491e      	ldr	r1, [pc, #120]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4918      	ldr	r1, [pc, #96]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	43db      	mvns	r3, r3
 80026de:	4914      	ldr	r1, [pc, #80]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d021      	beq.n	8002734 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
 80026fc:	e021      	b.n	8002742 <HAL_GPIO_Init+0x2e2>
 80026fe:	bf00      	nop
 8002700:	10320000 	.word	0x10320000
 8002704:	10310000 	.word	0x10310000
 8002708:	10220000 	.word	0x10220000
 800270c:	10210000 	.word	0x10210000
 8002710:	10120000 	.word	0x10120000
 8002714:	10110000 	.word	0x10110000
 8002718:	40021000 	.word	0x40021000
 800271c:	40010000 	.word	0x40010000
 8002720:	40010800 	.word	0x40010800
 8002724:	40010c00 	.word	0x40010c00
 8002728:	40011000 	.word	0x40011000
 800272c:	40011400 	.word	0x40011400
 8002730:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_GPIO_Init+0x304>)
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	43db      	mvns	r3, r3
 800273c:	4909      	ldr	r1, [pc, #36]	; (8002764 <HAL_GPIO_Init+0x304>)
 800273e:	4013      	ands	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f ae8e 	bne.w	8002474 <HAL_GPIO_Init+0x14>
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	372c      	adds	r7, #44	; 0x2c
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	40010400 	.word	0x40010400

08002768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e001      	b.n	800278a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	807b      	strh	r3, [r7, #2]
 80027a2:	4613      	mov	r3, r2
 80027a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a6:	787b      	ldrb	r3, [r7, #1]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ac:	887a      	ldrh	r2, [r7, #2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027b2:	e003      	b.n	80027bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	041a      	lsls	r2, r3, #16
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	611a      	str	r2, [r3, #16]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027d8:	887a      	ldrh	r2, [r7, #2]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	041a      	lsls	r2, r3, #16
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	400b      	ands	r3, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	611a      	str	r2, [r3, #16]
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f806 	bl	8002828 <HAL_GPIO_EXTI_Callback>
  }
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40010400 	.word	0x40010400

08002828 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e272      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285c:	4b92      	ldr	r3, [pc, #584]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00c      	beq.n	8002882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002868:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d112      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
 8002874:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b89      	ldr	r3, [pc, #548]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06c      	beq.n	8002968 <HAL_RCC_OscConfig+0x12c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d168      	bne.n	8002968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e24c      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x76>
 80028a4:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7f      	ldr	r2, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e02e      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b7b      	ldr	r3, [pc, #492]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7a      	ldr	r2, [pc, #488]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b78      	ldr	r3, [pc, #480]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a77      	ldr	r2, [pc, #476]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xbc>
 80028de:	4b72      	ldr	r3, [pc, #456]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a71      	ldr	r2, [pc, #452]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6e      	ldr	r2, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028f8:	4b6b      	ldr	r3, [pc, #428]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fc8a 	bl	8002230 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff fc86 	bl	8002230 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e200      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xe4>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7ff fc76 	bl	8002230 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff fc72 	bl	8002230 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1ec      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x10c>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d063      	beq.n	8002a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002976:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002982:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
 800298e:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1c0      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4939      	ldr	r1, [pc, #228]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e03a      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7ff fc2b 	bl	8002230 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7ff fc27 	bl	8002230 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1a1      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4927      	ldr	r1, [pc, #156]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7ff fc0a 	bl	8002230 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7ff fc06 	bl	8002230 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e180      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03a      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d019      	beq.n	8002a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7ff fbea 	bl	8002230 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7ff fbe6 	bl	8002230 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e160      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f000 fad8 	bl	8003034 <RCC_Delay>
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fbd0 	bl	8002230 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff fbcc 	bl	8002230 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e146      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	42420000 	.word	0x42420000
 8002ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b92      	ldr	r3, [pc, #584]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e9      	bne.n	8002a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a6 	beq.w	8002c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a87      	ldr	r2, [pc, #540]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b82      	ldr	r3, [pc, #520]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7ff fb8d 	bl	8002230 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7ff fb89 	bl	8002230 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	; 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e103      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x312>
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a6e      	ldr	r2, [pc, #440]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e02d      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b56:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a69      	ldr	r2, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a66      	ldr	r2, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	e01c      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x356>
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a5a      	ldr	r2, [pc, #360]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a57      	ldr	r2, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7ff fb3d 	bl	8002230 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7ff fb39 	bl	8002230 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0b1      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RCC_OscConfig+0x37e>
 8002bdc:	e014      	b.n	8002c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7ff fb27 	bl	8002230 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7ff fb23 	bl	8002230 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e09b      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ee      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8087 	beq.w	8002d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c24:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d061      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d146      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7ff faf7 	bl	8002230 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7ff faf3 	bl	8002230 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e06d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4921      	ldr	r1, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a19      	ldr	r1, [r3, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	430b      	orrs	r3, r1
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7ff fac7 	bl	8002230 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7ff fac3 	bl	8002230 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e03d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46a>
 8002cc4:	e035      	b.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7ff fab0 	bl	8002230 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff faac 	bl	8002230 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e026      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x498>
 8002cf2:	e01e      	b.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e019      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0d0      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4965      	ldr	r1, [pc, #404]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0b8      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d9c:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db4:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	494d      	ldr	r1, [pc, #308]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d040      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d115      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e07f      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e073      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e06b      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4936      	ldr	r1, [pc, #216]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e30:	f7ff f9fe 	bl	8002230 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f7ff f9fa 	bl	8002230 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e053      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 020c 	and.w	r2, r3, #12
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1eb      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d210      	bcs.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	4922      	ldr	r1, [pc, #136]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e032      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4916      	ldr	r1, [pc, #88]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	490e      	ldr	r1, [pc, #56]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ece:	f000 f821 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	490a      	ldr	r1, [pc, #40]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	5ccb      	ldrb	r3, [r1, r3]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1d0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f95c 	bl	80021ac <HAL_InitTick>

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08004154 	.word	0x08004154
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	20000014 	.word	0x20000014

08002f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	b490      	push	{r4, r7}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f1c:	1d3c      	adds	r4, r7, #4
 8002f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f24:	f240 2301 	movw	r3, #513	; 0x201
 8002f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d002      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x40>
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d003      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x46>
 8002f52:	e02b      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f56:	623b      	str	r3, [r7, #32]
      break;
 8002f58:	e02b      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	0c9b      	lsrs	r3, r3, #18
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3328      	adds	r3, #40	; 0x28
 8002f64:	443b      	add	r3, r7
 8002f66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0c5b      	lsrs	r3, r3, #17
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	3328      	adds	r3, #40	; 0x28
 8002f82:	443b      	add	r3, r7
 8002f84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f8e:	fb03 f202 	mul.w	r2, r3, r2
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	623b      	str	r3, [r7, #32]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fae:	623b      	str	r3, [r7, #32]
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc90      	pop	{r4, r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	08004144 	.word	0x08004144
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	007a1200 	.word	0x007a1200
 8002fcc:	003d0900 	.word	0x003d0900

08002fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	20000010 	.word	0x20000010

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff2 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	08004164 	.word	0x08004164

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffde 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	0adb      	lsrs	r3, r3, #11
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	08004164 	.word	0x08004164

08003034 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <RCC_Delay+0x34>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <RCC_Delay+0x38>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0a5b      	lsrs	r3, r3, #9
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003050:	bf00      	nop
  }
  while (Delay --);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	60fa      	str	r2, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f9      	bne.n	8003050 <RCC_Delay+0x1c>
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	20000010 	.word	0x20000010
 800306c:	10624dd3 	.word	0x10624dd3

08003070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e041      	b.n	8003106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe ff4a 	bl	8001f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f000 fc20 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e03a      	b.n	800319e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00e      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d009      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_TIM_Base_Start_IT+0x9c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d111      	bne.n	800318c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d010      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	e007      	b.n	800319c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800

080031b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e041      	b.n	800324a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe fecc 	bl	8001f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f000 fb7e 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_TIM_PWM_Start+0x24>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e022      	b.n	80032be <HAL_TIM_PWM_Start+0x6a>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d109      	bne.n	8003292 <HAL_TIM_PWM_Start+0x3e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e015      	b.n	80032be <HAL_TIM_PWM_Start+0x6a>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d109      	bne.n	80032ac <HAL_TIM_PWM_Start+0x58>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e008      	b.n	80032be <HAL_TIM_PWM_Start+0x6a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e05e      	b.n	8003384 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x82>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d4:	e013      	b.n	80032fe <HAL_TIM_PWM_Start+0xaa>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_PWM_Start+0x92>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e4:	e00b      	b.n	80032fe <HAL_TIM_PWM_Start+0xaa>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_PWM_Start+0xa2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f4:	e003      	b.n	80032fe <HAL_TIM_PWM_Start+0xaa>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2201      	movs	r2, #1
 8003304:	6839      	ldr	r1, [r7, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fd74 	bl	8003df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_TIM_PWM_Start+0x138>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d107      	bne.n	8003326 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_TIM_PWM_Start+0x138>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_TIM_PWM_Start+0xfa>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003338:	d009      	beq.n	800334e <HAL_TIM_PWM_Start+0xfa>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a14      	ldr	r2, [pc, #80]	; (8003390 <HAL_TIM_PWM_Start+0x13c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIM_PWM_Start+0xfa>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a12      	ldr	r2, [pc, #72]	; (8003394 <HAL_TIM_PWM_Start+0x140>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b06      	cmp	r3, #6
 800335e:	d010      	beq.n	8003382 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	e007      	b.n	8003382 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800

08003398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d122      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d11b      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0202 	mvn.w	r2, #2
 80033c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fa6f 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fa62 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fa71 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0204 	mvn.w	r2, #4
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa45 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa38 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa47 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b08      	cmp	r3, #8
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0208 	mvn.w	r2, #8
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2204      	movs	r2, #4
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa1b 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa0e 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa1d 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2208      	movs	r2, #8
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f9f1 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9e4 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f9f3 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0201 	mvn.w	r2, #1
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe fdfc 	bl	8002114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fce1 	bl	8003f0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9b7 	bl	80038e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b20      	cmp	r3, #32
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b20      	cmp	r3, #32
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0220 	mvn.w	r2, #32
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fcac 	bl	8003ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035be:	2302      	movs	r3, #2
 80035c0:	e0ac      	b.n	800371c <HAL_TIM_PWM_ConfigChannel+0x174>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	f200 809f 	bhi.w	8003710 <HAL_TIM_PWM_ConfigChannel+0x168>
 80035d2:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80035d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d8:	0800360d 	.word	0x0800360d
 80035dc:	08003711 	.word	0x08003711
 80035e0:	08003711 	.word	0x08003711
 80035e4:	08003711 	.word	0x08003711
 80035e8:	0800364d 	.word	0x0800364d
 80035ec:	08003711 	.word	0x08003711
 80035f0:	08003711 	.word	0x08003711
 80035f4:	08003711 	.word	0x08003711
 80035f8:	0800368f 	.word	0x0800368f
 80035fc:	08003711 	.word	0x08003711
 8003600:	08003711 	.word	0x08003711
 8003604:	08003711 	.word	0x08003711
 8003608:	080036cf 	.word	0x080036cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f9d0 	bl	80039b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0208 	orr.w	r2, r2, #8
 8003626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0204 	bic.w	r2, r2, #4
 8003636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6999      	ldr	r1, [r3, #24]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	619a      	str	r2, [r3, #24]
      break;
 800364a:	e062      	b.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa16 	bl	8003a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	021a      	lsls	r2, r3, #8
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	619a      	str	r2, [r3, #24]
      break;
 800368c:	e041      	b.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fa5f 	bl	8003b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0208 	orr.w	r2, r2, #8
 80036a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0204 	bic.w	r2, r2, #4
 80036b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69d9      	ldr	r1, [r3, #28]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	61da      	str	r2, [r3, #28]
      break;
 80036cc:	e021      	b.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 faa9 	bl	8003c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	61da      	str	r2, [r3, #28]
      break;
 800370e:	e000      	b.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_TIM_ConfigClockSource+0x18>
 8003738:	2302      	movs	r3, #2
 800373a:	e0b3      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x180>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800375a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003762:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003774:	d03e      	beq.n	80037f4 <HAL_TIM_ConfigClockSource+0xd0>
 8003776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377a:	f200 8087 	bhi.w	800388c <HAL_TIM_ConfigClockSource+0x168>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	f000 8085 	beq.w	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378a:	d87f      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x168>
 800378c:	2b70      	cmp	r3, #112	; 0x70
 800378e:	d01a      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xa2>
 8003790:	2b70      	cmp	r3, #112	; 0x70
 8003792:	d87b      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x168>
 8003794:	2b60      	cmp	r3, #96	; 0x60
 8003796:	d050      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x116>
 8003798:	2b60      	cmp	r3, #96	; 0x60
 800379a:	d877      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x168>
 800379c:	2b50      	cmp	r3, #80	; 0x50
 800379e:	d03c      	beq.n	800381a <HAL_TIM_ConfigClockSource+0xf6>
 80037a0:	2b50      	cmp	r3, #80	; 0x50
 80037a2:	d873      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x168>
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d058      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x136>
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d86f      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x168>
 80037ac:	2b30      	cmp	r3, #48	; 0x30
 80037ae:	d064      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x156>
 80037b0:	2b30      	cmp	r3, #48	; 0x30
 80037b2:	d86b      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x168>
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d060      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x156>
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d867      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x168>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d05c      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x156>
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d05a      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037c4:	e062      	b.n	800388c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6899      	ldr	r1, [r3, #8]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f000 faee 	bl	8003db6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	609a      	str	r2, [r3, #8]
      break;
 80037f2:	e04e      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6899      	ldr	r1, [r3, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f000 fad7 	bl	8003db6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003816:	609a      	str	r2, [r3, #8]
      break;
 8003818:	e03b      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f000 fa4e 	bl	8003cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2150      	movs	r1, #80	; 0x50
 8003832:	4618      	mov	r0, r3
 8003834:	f000 faa5 	bl	8003d82 <TIM_ITRx_SetConfig>
      break;
 8003838:	e02b      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	f000 fa6c 	bl	8003d24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2160      	movs	r1, #96	; 0x60
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fa95 	bl	8003d82 <TIM_ITRx_SetConfig>
      break;
 8003858:	e01b      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	461a      	mov	r2, r3
 8003868:	f000 fa2e 	bl	8003cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2140      	movs	r1, #64	; 0x40
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fa85 	bl	8003d82 <TIM_ITRx_SetConfig>
      break;
 8003878:	e00b      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f000 fa7c 	bl	8003d82 <TIM_ITRx_SetConfig>
        break;
 800388a:	e002      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003890:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a29      	ldr	r2, [pc, #164]	; (80039ac <TIM_Base_SetConfig+0xb8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00b      	beq.n	8003924 <TIM_Base_SetConfig+0x30>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d007      	beq.n	8003924 <TIM_Base_SetConfig+0x30>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <TIM_Base_SetConfig+0xbc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_Base_SetConfig+0x30>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <TIM_Base_SetConfig+0xc0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d108      	bne.n	8003936 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <TIM_Base_SetConfig+0xb8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00b      	beq.n	8003956 <TIM_Base_SetConfig+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d007      	beq.n	8003956 <TIM_Base_SetConfig+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <TIM_Base_SetConfig+0xbc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_Base_SetConfig+0x62>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <TIM_Base_SetConfig+0xc0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a07      	ldr	r2, [pc, #28]	; (80039ac <TIM_Base_SetConfig+0xb8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d103      	bne.n	800399c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	615a      	str	r2, [r3, #20]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800

080039b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a1c      	ldr	r2, [pc, #112]	; (8003a80 <TIM_OC1_SetConfig+0xc8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10c      	bne.n	8003a2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <TIM_OC1_SetConfig+0xc8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d111      	bne.n	8003a5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00

08003a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0210 	bic.w	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0320 	bic.w	r3, r3, #32
 8003ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <TIM_OC2_SetConfig+0xd0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d10d      	bne.n	8003b00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <TIM_OC2_SetConfig+0xd0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d113      	bne.n	8003b30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	40012c00 	.word	0x40012c00

08003b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <TIM_OC3_SetConfig+0xd0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10d      	bne.n	8003bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <TIM_OC3_SetConfig+0xd0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d113      	bne.n	8003c02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	621a      	str	r2, [r3, #32]
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40012c00 	.word	0x40012c00

08003c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	031b      	lsls	r3, r3, #12
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a0f      	ldr	r2, [pc, #60]	; (8003cc4 <TIM_OC4_SetConfig+0x98>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d109      	bne.n	8003ca0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	019b      	lsls	r3, r3, #6
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00

08003cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f023 0201 	bic.w	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f023 030a 	bic.w	r3, r3, #10
 8003d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f023 0210 	bic.w	r2, r3, #16
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	031b      	lsls	r3, r3, #12
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	621a      	str	r2, [r3, #32]
}
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f043 0307 	orr.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b087      	sub	sp, #28
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	021a      	lsls	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	609a      	str	r2, [r3, #8]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2201      	movs	r2, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	401a      	ands	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e046      	b.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a16      	ldr	r2, [pc, #88]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d009      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a10      	ldr	r2, [pc, #64]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800

08003ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e03f      	b.n	8003fae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fe f868 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2224      	movs	r2, #36	; 0x24
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f829 	bl	8003fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ff2:	f023 030c 	bic.w	r3, r3, #12
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <UART_SetConfig+0x114>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe fff4 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	e002      	b.n	800402e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe ffdc 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 800402c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009a      	lsls	r2, r3, #2
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <UART_SetConfig+0x118>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	0119      	lsls	r1, r3, #4
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	fbb2 f2f3 	udiv	r2, r2, r3
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <UART_SetConfig+0x118>)
 8004066:	fba3 0302 	umull	r0, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2064      	movs	r0, #100	; 0x64
 800406e:	fb00 f303 	mul.w	r3, r0, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	; 0x32
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <UART_SetConfig+0x118>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	4419      	add	r1, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009a      	lsls	r2, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	fbb2 f2f3 	udiv	r2, r2, r3
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <UART_SetConfig+0x118>)
 800409e:	fba3 0302 	umull	r0, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2064      	movs	r0, #100	; 0x64
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	3332      	adds	r3, #50	; 0x32
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <UART_SetConfig+0x118>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 020f 	and.w	r2, r3, #15
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	440a      	add	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40013800 	.word	0x40013800
 80040d0:	51eb851f 	.word	0x51eb851f

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	2600      	movs	r6, #0
 80040d8:	4d0c      	ldr	r5, [pc, #48]	; (800410c <__libc_init_array+0x38>)
 80040da:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	42a6      	cmp	r6, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	f000 f822 	bl	800412c <_init>
 80040e8:	2600      	movs	r6, #0
 80040ea:	4d0a      	ldr	r5, [pc, #40]	; (8004114 <__libc_init_array+0x40>)
 80040ec:	4c0a      	ldr	r4, [pc, #40]	; (8004118 <__libc_init_array+0x44>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	42a6      	cmp	r6, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fc:	4798      	blx	r3
 80040fe:	3601      	adds	r6, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	f855 3b04 	ldr.w	r3, [r5], #4
 8004106:	4798      	blx	r3
 8004108:	3601      	adds	r6, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	0800416c 	.word	0x0800416c
 8004110:	0800416c 	.word	0x0800416c
 8004114:	0800416c 	.word	0x0800416c
 8004118:	08004170 	.word	0x08004170

0800411c <memset>:
 800411c:	4603      	mov	r3, r0
 800411e:	4402      	add	r2, r0
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	f803 1b01 	strb.w	r1, [r3], #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
